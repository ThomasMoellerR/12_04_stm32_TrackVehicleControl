
TrackVehicleControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c9c  08003c9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c9c  08003c9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c9c  08003c9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c9c  08003c9c  00013c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ca0  08003ca0  00013ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002178  20000010  08003cb0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002188  08003cb0  00022188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015608  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e25  00000000  00000000  0003563d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d30  00000000  00000000  00038468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c10  00000000  00000000  00039198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016971  00000000  00000000  00039da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bdc9  00000000  00000000  00050719  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072c1c  00000000  00000000  0005c4e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf0fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035ac  00000000  00000000  000cf17c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c58 	.word	0x08003c58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003c58 	.word	0x08003c58

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_Init+0x28>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_Init+0x28>)
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f941 	bl	80008ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f808 	bl	8000680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000670:	f003 f802 	bl	8003678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40022000 	.word	0x40022000

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x54>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x58>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	fbb3 f3f1 	udiv	r3, r3, r1
 800069a:	fbb2 f3f3 	udiv	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f959 	bl	8000956 <HAL_SYSTICK_Config>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e00e      	b.n	80006cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	d80a      	bhi.n	80006ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b4:	2200      	movs	r2, #0
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	f04f 30ff 	mov.w	r0, #4294967295
 80006bc:	f000 f921 	bl	8000902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_InitTick+0x5c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000004 	.word	0x20000004
 80006dc:	20000000 	.word	0x20000000

080006e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x1c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x20>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a03      	ldr	r2, [pc, #12]	; (8000700 <HAL_IncTick+0x20>)
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000004 	.word	0x20000004
 8000700:	20000038 	.word	0x20000038

08000704 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return uwTick;
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <HAL_GetTick+0x10>)
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	20000038 	.word	0x20000038

08000718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000720:	f7ff fff0 	bl	8000704 <HAL_GetTick>
 8000724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000730:	d005      	beq.n	800073e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <HAL_Delay+0x40>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	461a      	mov	r2, r3
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4413      	add	r3, r2
 800073c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800073e:	bf00      	nop
 8000740:	f7ff ffe0 	bl	8000704 <HAL_GetTick>
 8000744:	4602      	mov	r2, r0
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	429a      	cmp	r2, r3
 800074e:	d8f7      	bhi.n	8000740 <HAL_Delay+0x28>
  {
  }
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000004 	.word	0x20000004

0800075c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <NVIC_SetPriorityGrouping+0x44>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000778:	4013      	ands	r3, r2
 800077a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078e:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <NVIC_SetPriorityGrouping+0x44>)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	60d3      	str	r3, [r2, #12]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <NVIC_GetPriorityGrouping+0x18>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	0a1b      	lsrs	r3, r3, #8
 80007ae:	f003 0307 	and.w	r3, r3, #7
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f003 021f 	and.w	r2, r3, #31
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <NVIC_EnableIRQ+0x2c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	2001      	movs	r0, #1
 80007da:	fa00 f202 	lsl.w	r2, r0, r2
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	da0b      	bge.n	800081c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <NVIC_SetPriority+0x4c>)
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	f003 030f 	and.w	r3, r3, #15
 8000810:	3b04      	subs	r3, #4
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800081a:	e009      	b.n	8000830 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4907      	ldr	r1, [pc, #28]	; (8000840 <NVIC_SetPriority+0x50>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	0112      	lsls	r2, r2, #4
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	440b      	add	r3, r1
 800082c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00
 8000840:	e000e100 	.word	0xe000e100

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b8:	d301      	bcc.n	80008be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00f      	b.n	80008de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <SysTick_Config+0x40>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c6:	210f      	movs	r1, #15
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f7ff ff90 	bl	80007f0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <SysTick_Config+0x40>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <SysTick_Config+0x40>)
 80008d8:	2207      	movs	r2, #7
 80008da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	e000e010 	.word	0xe000e010

080008ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff31 	bl	800075c <NVIC_SetPriorityGrouping>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000914:	f7ff ff46 	bl	80007a4 <NVIC_GetPriorityGrouping>
 8000918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	6978      	ldr	r0, [r7, #20]
 8000920:	f7ff ff90 	bl	8000844 <NVIC_EncodePriority>
 8000924:	4602      	mov	r2, r0
 8000926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff5f 	bl	80007f0 <NVIC_SetPriority>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff39 	bl	80007c0 <NVIC_EnableIRQ>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ffa2 	bl	80008a8 <SysTick_Config>
 8000964:	4603      	mov	r3, r0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d101      	bne.n	8000986 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e043      	b.n	8000a0e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <HAL_DMA_Init+0xa8>)
 800098e:	4413      	add	r3, r2
 8000990:	4a22      	ldr	r2, [pc, #136]	; (8000a1c <HAL_DMA_Init+0xac>)
 8000992:	fba2 2303 	umull	r2, r3, r2, r3
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	009a      	lsls	r2, r3, #2
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <HAL_DMA_Init+0xb0>)
 80009a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2202      	movs	r2, #2
 80009a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80009be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80009c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2201      	movs	r2, #1
 8000a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	bffdfff8 	.word	0xbffdfff8
 8000a1c:	cccccccd 	.word	0xcccccccd
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d101      	bne.n	8000a44 <HAL_DMA_Start_IT+0x20>
 8000a40:	2302      	movs	r3, #2
 8000a42:	e04a      	b.n	8000ada <HAL_DMA_Start_IT+0xb6>
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d13a      	bne.n	8000acc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	2202      	movs	r2, #2
 8000a5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f022 0201 	bic.w	r2, r2, #1
 8000a72:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	68b9      	ldr	r1, [r7, #8]
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f000 f9ae 	bl	8000ddc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d008      	beq.n	8000a9a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f042 020e 	orr.w	r2, r2, #14
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e00f      	b.n	8000aba <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f022 0204 	bic.w	r2, r2, #4
 8000aa8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f042 020a 	orr.w	r2, r2, #10
 8000ab8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f042 0201 	orr.w	r2, r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	e005      	b.n	8000ad8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d005      	beq.n	8000b06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2204      	movs	r2, #4
 8000afe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	73fb      	strb	r3, [r7, #15]
 8000b04:	e051      	b.n	8000baa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f022 020e 	bic.w	r2, r2, #14
 8000b14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f022 0201 	bic.w	r2, r2, #1
 8000b24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a22      	ldr	r2, [pc, #136]	; (8000bb4 <HAL_DMA_Abort_IT+0xd0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d029      	beq.n	8000b84 <HAL_DMA_Abort_IT+0xa0>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a20      	ldr	r2, [pc, #128]	; (8000bb8 <HAL_DMA_Abort_IT+0xd4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d022      	beq.n	8000b80 <HAL_DMA_Abort_IT+0x9c>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a1f      	ldr	r2, [pc, #124]	; (8000bbc <HAL_DMA_Abort_IT+0xd8>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d01a      	beq.n	8000b7a <HAL_DMA_Abort_IT+0x96>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a1d      	ldr	r2, [pc, #116]	; (8000bc0 <HAL_DMA_Abort_IT+0xdc>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d012      	beq.n	8000b74 <HAL_DMA_Abort_IT+0x90>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <HAL_DMA_Abort_IT+0xe0>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d00a      	beq.n	8000b6e <HAL_DMA_Abort_IT+0x8a>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <HAL_DMA_Abort_IT+0xe4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d102      	bne.n	8000b68 <HAL_DMA_Abort_IT+0x84>
 8000b62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b66:	e00e      	b.n	8000b86 <HAL_DMA_Abort_IT+0xa2>
 8000b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b6c:	e00b      	b.n	8000b86 <HAL_DMA_Abort_IT+0xa2>
 8000b6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b72:	e008      	b.n	8000b86 <HAL_DMA_Abort_IT+0xa2>
 8000b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b78:	e005      	b.n	8000b86 <HAL_DMA_Abort_IT+0xa2>
 8000b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7e:	e002      	b.n	8000b86 <HAL_DMA_Abort_IT+0xa2>
 8000b80:	2310      	movs	r3, #16
 8000b82:	e000      	b.n	8000b86 <HAL_DMA_Abort_IT+0xa2>
 8000b84:	2301      	movs	r3, #1
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <HAL_DMA_Abort_IT+0xe8>)
 8000b88:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	4798      	blx	r3
    } 
  }
  return status;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40020008 	.word	0x40020008
 8000bb8:	4002001c 	.word	0x4002001c
 8000bbc:	40020030 	.word	0x40020030
 8000bc0:	40020044 	.word	0x40020044
 8000bc4:	40020058 	.word	0x40020058
 8000bc8:	4002006c 	.word	0x4002006c
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	2204      	movs	r2, #4
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d04f      	beq.n	8000c98 <HAL_DMA_IRQHandler+0xc8>
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d04a      	beq.n	8000c98 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0320 	and.w	r3, r3, #32
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d107      	bne.n	8000c20 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f022 0204 	bic.w	r2, r2, #4
 8000c1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a66      	ldr	r2, [pc, #408]	; (8000dc0 <HAL_DMA_IRQHandler+0x1f0>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d029      	beq.n	8000c7e <HAL_DMA_IRQHandler+0xae>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a65      	ldr	r2, [pc, #404]	; (8000dc4 <HAL_DMA_IRQHandler+0x1f4>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d022      	beq.n	8000c7a <HAL_DMA_IRQHandler+0xaa>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a63      	ldr	r2, [pc, #396]	; (8000dc8 <HAL_DMA_IRQHandler+0x1f8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d01a      	beq.n	8000c74 <HAL_DMA_IRQHandler+0xa4>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a62      	ldr	r2, [pc, #392]	; (8000dcc <HAL_DMA_IRQHandler+0x1fc>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d012      	beq.n	8000c6e <HAL_DMA_IRQHandler+0x9e>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a60      	ldr	r2, [pc, #384]	; (8000dd0 <HAL_DMA_IRQHandler+0x200>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d00a      	beq.n	8000c68 <HAL_DMA_IRQHandler+0x98>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a5f      	ldr	r2, [pc, #380]	; (8000dd4 <HAL_DMA_IRQHandler+0x204>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d102      	bne.n	8000c62 <HAL_DMA_IRQHandler+0x92>
 8000c5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c60:	e00e      	b.n	8000c80 <HAL_DMA_IRQHandler+0xb0>
 8000c62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c66:	e00b      	b.n	8000c80 <HAL_DMA_IRQHandler+0xb0>
 8000c68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c6c:	e008      	b.n	8000c80 <HAL_DMA_IRQHandler+0xb0>
 8000c6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c72:	e005      	b.n	8000c80 <HAL_DMA_IRQHandler+0xb0>
 8000c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c78:	e002      	b.n	8000c80 <HAL_DMA_IRQHandler+0xb0>
 8000c7a:	2340      	movs	r3, #64	; 0x40
 8000c7c:	e000      	b.n	8000c80 <HAL_DMA_IRQHandler+0xb0>
 8000c7e:	2304      	movs	r3, #4
 8000c80:	4a55      	ldr	r2, [pc, #340]	; (8000dd8 <HAL_DMA_IRQHandler+0x208>)
 8000c82:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 8094 	beq.w	8000db6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000c96:	e08e      	b.n	8000db6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d056      	beq.n	8000d56 <HAL_DMA_IRQHandler+0x186>
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d051      	beq.n	8000d56 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0320 	and.w	r3, r3, #32
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10b      	bne.n	8000cd8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f022 020a 	bic.w	r2, r2, #10
 8000cce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a38      	ldr	r2, [pc, #224]	; (8000dc0 <HAL_DMA_IRQHandler+0x1f0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d029      	beq.n	8000d36 <HAL_DMA_IRQHandler+0x166>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a37      	ldr	r2, [pc, #220]	; (8000dc4 <HAL_DMA_IRQHandler+0x1f4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d022      	beq.n	8000d32 <HAL_DMA_IRQHandler+0x162>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a35      	ldr	r2, [pc, #212]	; (8000dc8 <HAL_DMA_IRQHandler+0x1f8>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d01a      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x15c>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a34      	ldr	r2, [pc, #208]	; (8000dcc <HAL_DMA_IRQHandler+0x1fc>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d012      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x156>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a32      	ldr	r2, [pc, #200]	; (8000dd0 <HAL_DMA_IRQHandler+0x200>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d00a      	beq.n	8000d20 <HAL_DMA_IRQHandler+0x150>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a31      	ldr	r2, [pc, #196]	; (8000dd4 <HAL_DMA_IRQHandler+0x204>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d102      	bne.n	8000d1a <HAL_DMA_IRQHandler+0x14a>
 8000d14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d18:	e00e      	b.n	8000d38 <HAL_DMA_IRQHandler+0x168>
 8000d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d1e:	e00b      	b.n	8000d38 <HAL_DMA_IRQHandler+0x168>
 8000d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d24:	e008      	b.n	8000d38 <HAL_DMA_IRQHandler+0x168>
 8000d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2a:	e005      	b.n	8000d38 <HAL_DMA_IRQHandler+0x168>
 8000d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d30:	e002      	b.n	8000d38 <HAL_DMA_IRQHandler+0x168>
 8000d32:	2320      	movs	r3, #32
 8000d34:	e000      	b.n	8000d38 <HAL_DMA_IRQHandler+0x168>
 8000d36:	2302      	movs	r3, #2
 8000d38:	4a27      	ldr	r2, [pc, #156]	; (8000dd8 <HAL_DMA_IRQHandler+0x208>)
 8000d3a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d034      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d54:	e02f      	b.n	8000db6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4013      	ands	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d028      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x1e8>
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d023      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 020e 	bic.w	r2, r2, #14
 8000d7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2201      	movs	r2, #1
 8000d94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d004      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	4798      	blx	r3
    }
  }
  return;
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
}
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40020008 	.word	0x40020008
 8000dc4:	4002001c 	.word	0x4002001c
 8000dc8:	40020030 	.word	0x40020030
 8000dcc:	40020044 	.word	0x40020044
 8000dd0:	40020058 	.word	0x40020058
 8000dd4:	4002006c 	.word	0x4002006c
 8000dd8:	40020000 	.word	0x40020000

08000ddc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df2:	2101      	movs	r1, #1
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b10      	cmp	r3, #16
 8000e08:	d108      	bne.n	8000e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e1a:	e007      	b.n	8000e2c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	60da      	str	r2, [r3, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
	...

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b08b      	sub	sp, #44	; 0x2c
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5a:	e127      	b.n	80010ac <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	69fa      	ldr	r2, [r7, #28]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f040 8116 	bne.w	80010a6 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b12      	cmp	r3, #18
 8000e80:	d034      	beq.n	8000eec <HAL_GPIO_Init+0xb4>
 8000e82:	2b12      	cmp	r3, #18
 8000e84:	d80d      	bhi.n	8000ea2 <HAL_GPIO_Init+0x6a>
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d02b      	beq.n	8000ee2 <HAL_GPIO_Init+0xaa>
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d804      	bhi.n	8000e98 <HAL_GPIO_Init+0x60>
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d031      	beq.n	8000ef6 <HAL_GPIO_Init+0xbe>
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d01c      	beq.n	8000ed0 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e96:	e048      	b.n	8000f2a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d043      	beq.n	8000f24 <HAL_GPIO_Init+0xec>
 8000e9c:	2b11      	cmp	r3, #17
 8000e9e:	d01b      	beq.n	8000ed8 <HAL_GPIO_Init+0xa0>
          break;
 8000ea0:	e043      	b.n	8000f2a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000ea2:	4a87      	ldr	r2, [pc, #540]	; (80010c0 <HAL_GPIO_Init+0x288>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d026      	beq.n	8000ef6 <HAL_GPIO_Init+0xbe>
 8000ea8:	4a85      	ldr	r2, [pc, #532]	; (80010c0 <HAL_GPIO_Init+0x288>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d806      	bhi.n	8000ebc <HAL_GPIO_Init+0x84>
 8000eae:	4a85      	ldr	r2, [pc, #532]	; (80010c4 <HAL_GPIO_Init+0x28c>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d020      	beq.n	8000ef6 <HAL_GPIO_Init+0xbe>
 8000eb4:	4a84      	ldr	r2, [pc, #528]	; (80010c8 <HAL_GPIO_Init+0x290>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d01d      	beq.n	8000ef6 <HAL_GPIO_Init+0xbe>
          break;
 8000eba:	e036      	b.n	8000f2a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000ebc:	4a83      	ldr	r2, [pc, #524]	; (80010cc <HAL_GPIO_Init+0x294>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d019      	beq.n	8000ef6 <HAL_GPIO_Init+0xbe>
 8000ec2:	4a83      	ldr	r2, [pc, #524]	; (80010d0 <HAL_GPIO_Init+0x298>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d016      	beq.n	8000ef6 <HAL_GPIO_Init+0xbe>
 8000ec8:	4a82      	ldr	r2, [pc, #520]	; (80010d4 <HAL_GPIO_Init+0x29c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d013      	beq.n	8000ef6 <HAL_GPIO_Init+0xbe>
          break;
 8000ece:	e02c      	b.n	8000f2a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	623b      	str	r3, [r7, #32]
          break;
 8000ed6:	e028      	b.n	8000f2a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	3304      	adds	r3, #4
 8000ede:	623b      	str	r3, [r7, #32]
          break;
 8000ee0:	e023      	b.n	8000f2a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	3308      	adds	r3, #8
 8000ee8:	623b      	str	r3, [r7, #32]
          break;
 8000eea:	e01e      	b.n	8000f2a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	330c      	adds	r3, #12
 8000ef2:	623b      	str	r3, [r7, #32]
          break;
 8000ef4:	e019      	b.n	8000f2a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d102      	bne.n	8000f04 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000efe:	2304      	movs	r3, #4
 8000f00:	623b      	str	r3, [r7, #32]
          break;
 8000f02:	e012      	b.n	8000f2a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d105      	bne.n	8000f18 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	611a      	str	r2, [r3, #16]
          break;
 8000f16:	e008      	b.n	8000f2a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69fa      	ldr	r2, [r7, #28]
 8000f20:	615a      	str	r2, [r3, #20]
          break;
 8000f22:	e002      	b.n	8000f2a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
          break;
 8000f28:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2bff      	cmp	r3, #255	; 0xff
 8000f2e:	d801      	bhi.n	8000f34 <HAL_GPIO_Init+0xfc>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	e001      	b.n	8000f38 <HAL_GPIO_Init+0x100>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3304      	adds	r3, #4
 8000f38:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	2bff      	cmp	r3, #255	; 0xff
 8000f3e:	d802      	bhi.n	8000f46 <HAL_GPIO_Init+0x10e>
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x114>
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	3b08      	subs	r3, #8
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	210f      	movs	r1, #15
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	6a39      	ldr	r1, [r7, #32]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	431a      	orrs	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 8096 	beq.w	80010a6 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7a:	4b57      	ldr	r3, [pc, #348]	; (80010d8 <HAL_GPIO_Init+0x2a0>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a56      	ldr	r2, [pc, #344]	; (80010d8 <HAL_GPIO_Init+0x2a0>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6193      	str	r3, [r2, #24]
 8000f86:	4b54      	ldr	r3, [pc, #336]	; (80010d8 <HAL_GPIO_Init+0x2a0>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000f92:	4a52      	ldr	r2, [pc, #328]	; (80010dc <HAL_GPIO_Init+0x2a4>)
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a49      	ldr	r2, [pc, #292]	; (80010e0 <HAL_GPIO_Init+0x2a8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0x1ae>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a48      	ldr	r2, [pc, #288]	; (80010e4 <HAL_GPIO_Init+0x2ac>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_GPIO_Init+0x1aa>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a47      	ldr	r2, [pc, #284]	; (80010e8 <HAL_GPIO_Init+0x2b0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d007      	beq.n	8000fde <HAL_GPIO_Init+0x1a6>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a46      	ldr	r2, [pc, #280]	; (80010ec <HAL_GPIO_Init+0x2b4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_GPIO_Init+0x1a2>
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e006      	b.n	8000fe8 <HAL_GPIO_Init+0x1b0>
 8000fda:	2304      	movs	r3, #4
 8000fdc:	e004      	b.n	8000fe8 <HAL_GPIO_Init+0x1b0>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e002      	b.n	8000fe8 <HAL_GPIO_Init+0x1b0>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <HAL_GPIO_Init+0x1b0>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fea:	f002 0203 	and.w	r2, r2, #3
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	4093      	lsls	r3, r2
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000ff8:	4938      	ldr	r1, [pc, #224]	; (80010dc <HAL_GPIO_Init+0x2a4>)
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d006      	beq.n	8001020 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001012:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4936      	ldr	r1, [pc, #216]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	600b      	str	r3, [r1, #0]
 800101e:	e006      	b.n	800102e <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001020:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	43db      	mvns	r3, r3
 8001028:	4931      	ldr	r1, [pc, #196]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 800102a:	4013      	ands	r3, r2
 800102c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d006      	beq.n	8001048 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	492c      	ldr	r1, [pc, #176]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	604b      	str	r3, [r1, #4]
 8001046:	e006      	b.n	8001056 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001048:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	43db      	mvns	r3, r3
 8001050:	4927      	ldr	r1, [pc, #156]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 8001052:	4013      	ands	r3, r2
 8001054:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	4922      	ldr	r1, [pc, #136]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	608b      	str	r3, [r1, #8]
 800106e:	e006      	b.n	800107e <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	43db      	mvns	r3, r3
 8001078:	491d      	ldr	r1, [pc, #116]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 800107a:	4013      	ands	r3, r2
 800107c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	4918      	ldr	r1, [pc, #96]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	60cb      	str	r3, [r1, #12]
 8001096:	e006      	b.n	80010a6 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	43db      	mvns	r3, r3
 80010a0:	4913      	ldr	r1, [pc, #76]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	3301      	adds	r3, #1
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	2b0f      	cmp	r3, #15
 80010b0:	f67f aed4 	bls.w	8000e5c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80010b4:	bf00      	nop
 80010b6:	372c      	adds	r7, #44	; 0x2c
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	10210000 	.word	0x10210000
 80010c4:	10110000 	.word	0x10110000
 80010c8:	10120000 	.word	0x10120000
 80010cc:	10310000 	.word	0x10310000
 80010d0:	10320000 	.word	0x10320000
 80010d4:	10220000 	.word	0x10220000
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010000 	.word	0x40010000
 80010e0:	40010800 	.word	0x40010800
 80010e4:	40010c00 	.word	0x40010c00
 80010e8:	40011000 	.word	0x40011000
 80010ec:	40011400 	.word	0x40011400
 80010f0:	40010400 	.word	0x40010400

080010f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 8087 	beq.w	800121c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800110e:	4b92      	ldr	r3, [pc, #584]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b04      	cmp	r3, #4
 8001118:	d00c      	beq.n	8001134 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800111a:	4b8f      	ldr	r3, [pc, #572]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b08      	cmp	r3, #8
 8001124:	d112      	bne.n	800114c <HAL_RCC_OscConfig+0x58>
 8001126:	4b8c      	ldr	r3, [pc, #560]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001132:	d10b      	bne.n	800114c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	4b88      	ldr	r3, [pc, #544]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d06c      	beq.n	800121a <HAL_RCC_OscConfig+0x126>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d168      	bne.n	800121a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e22d      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001154:	d106      	bne.n	8001164 <HAL_RCC_OscConfig+0x70>
 8001156:	4b80      	ldr	r3, [pc, #512]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a7f      	ldr	r2, [pc, #508]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e02e      	b.n	80011c2 <HAL_RCC_OscConfig+0xce>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10c      	bne.n	8001186 <HAL_RCC_OscConfig+0x92>
 800116c:	4b7a      	ldr	r3, [pc, #488]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a79      	ldr	r2, [pc, #484]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 8001172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b77      	ldr	r3, [pc, #476]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a76      	ldr	r2, [pc, #472]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 800117e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e01d      	b.n	80011c2 <HAL_RCC_OscConfig+0xce>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800118e:	d10c      	bne.n	80011aa <HAL_RCC_OscConfig+0xb6>
 8001190:	4b71      	ldr	r3, [pc, #452]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a70      	ldr	r2, [pc, #448]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 8001196:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b6e      	ldr	r3, [pc, #440]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a6d      	ldr	r2, [pc, #436]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 80011a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	e00b      	b.n	80011c2 <HAL_RCC_OscConfig+0xce>
 80011aa:	4b6b      	ldr	r3, [pc, #428]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a6a      	ldr	r2, [pc, #424]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 80011b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b68      	ldr	r3, [pc, #416]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a67      	ldr	r2, [pc, #412]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 80011bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d013      	beq.n	80011f2 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ca:	f7ff fa9b 	bl	8000704 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d2:	f7ff fa97 	bl	8000704 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b64      	cmp	r3, #100	; 0x64
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e1e1      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e4:	4b5c      	ldr	r3, [pc, #368]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0xde>
 80011f0:	e014      	b.n	800121c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fa87 	bl	8000704 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fa:	f7ff fa83 	bl	8000704 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b64      	cmp	r3, #100	; 0x64
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e1cd      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120c:	4b52      	ldr	r3, [pc, #328]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f0      	bne.n	80011fa <HAL_RCC_OscConfig+0x106>
 8001218:	e000      	b.n	800121c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d063      	beq.n	80012f0 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001228:	4b4b      	ldr	r3, [pc, #300]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00b      	beq.n	800124c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001234:	4b48      	ldr	r3, [pc, #288]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b08      	cmp	r3, #8
 800123e:	d11c      	bne.n	800127a <HAL_RCC_OscConfig+0x186>
 8001240:	4b45      	ldr	r3, [pc, #276]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d116      	bne.n	800127a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124c:	4b42      	ldr	r3, [pc, #264]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_RCC_OscConfig+0x170>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d001      	beq.n	8001264 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e1a1      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001264:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4939      	ldr	r1, [pc, #228]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 8001274:	4313      	orrs	r3, r2
 8001276:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001278:	e03a      	b.n	80012f0 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d020      	beq.n	80012c4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001282:	4b36      	ldr	r3, [pc, #216]	; (800135c <HAL_RCC_OscConfig+0x268>)
 8001284:	2201      	movs	r2, #1
 8001286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fa3c 	bl	8000704 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff fa38 	bl	8000704 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e182      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ae:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4926      	ldr	r1, [pc, #152]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
 80012c2:	e015      	b.n	80012f0 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c4:	4b25      	ldr	r3, [pc, #148]	; (800135c <HAL_RCC_OscConfig+0x268>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fa1b 	bl	8000704 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d2:	f7ff fa17 	bl	8000704 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e161      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d039      	beq.n	8001370 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d019      	beq.n	8001338 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130a:	f7ff f9fb 	bl	8000704 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001312:	f7ff f9f7 	bl	8000704 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e141      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_RCC_OscConfig+0x264>)
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001330:	2001      	movs	r0, #1
 8001332:	f000 fae3 	bl	80018fc <RCC_Delay>
 8001336:	e01b      	b.n	8001370 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_RCC_OscConfig+0x26c>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff f9e1 	bl	8000704 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	e00e      	b.n	8001364 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff f9dd 	bl	8000704 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d907      	bls.n	8001364 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e127      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
 8001358:	40021000 	.word	0x40021000
 800135c:	42420000 	.word	0x42420000
 8001360:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001364:	4b92      	ldr	r3, [pc, #584]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1ea      	bne.n	8001346 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80a6 	beq.w	80014ca <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001382:	4b8b      	ldr	r3, [pc, #556]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10d      	bne.n	80013aa <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b88      	ldr	r3, [pc, #544]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a87      	ldr	r2, [pc, #540]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4b85      	ldr	r3, [pc, #532]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013a6:	2301      	movs	r3, #1
 80013a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013aa:	4b82      	ldr	r3, [pc, #520]	; (80015b4 <HAL_RCC_OscConfig+0x4c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d118      	bne.n	80013e8 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b6:	4b7f      	ldr	r3, [pc, #508]	; (80015b4 <HAL_RCC_OscConfig+0x4c0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a7e      	ldr	r2, [pc, #504]	; (80015b4 <HAL_RCC_OscConfig+0x4c0>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c2:	f7ff f99f 	bl	8000704 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ca:	f7ff f99b 	bl	8000704 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b64      	cmp	r3, #100	; 0x64
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e0e5      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	4b75      	ldr	r3, [pc, #468]	; (80015b4 <HAL_RCC_OscConfig+0x4c0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d106      	bne.n	80013fe <HAL_RCC_OscConfig+0x30a>
 80013f0:	4b6f      	ldr	r3, [pc, #444]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4a6e      	ldr	r2, [pc, #440]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6213      	str	r3, [r2, #32]
 80013fc:	e02d      	b.n	800145a <HAL_RCC_OscConfig+0x366>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x32c>
 8001406:	4b6a      	ldr	r3, [pc, #424]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4a69      	ldr	r2, [pc, #420]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6213      	str	r3, [r2, #32]
 8001412:	4b67      	ldr	r3, [pc, #412]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	4a66      	ldr	r2, [pc, #408]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001418:	f023 0304 	bic.w	r3, r3, #4
 800141c:	6213      	str	r3, [r2, #32]
 800141e:	e01c      	b.n	800145a <HAL_RCC_OscConfig+0x366>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b05      	cmp	r3, #5
 8001426:	d10c      	bne.n	8001442 <HAL_RCC_OscConfig+0x34e>
 8001428:	4b61      	ldr	r3, [pc, #388]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	4a60      	ldr	r2, [pc, #384]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6213      	str	r3, [r2, #32]
 8001434:	4b5e      	ldr	r3, [pc, #376]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	4a5d      	ldr	r2, [pc, #372]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6213      	str	r3, [r2, #32]
 8001440:	e00b      	b.n	800145a <HAL_RCC_OscConfig+0x366>
 8001442:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4a5a      	ldr	r2, [pc, #360]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	6213      	str	r3, [r2, #32]
 800144e:	4b58      	ldr	r3, [pc, #352]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4a57      	ldr	r2, [pc, #348]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001454:	f023 0304 	bic.w	r3, r3, #4
 8001458:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d015      	beq.n	800148e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff f94f 	bl	8000704 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001468:	e00a      	b.n	8001480 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146a:	f7ff f94b 	bl	8000704 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	f241 3288 	movw	r2, #5000	; 0x1388
 8001478:	4293      	cmp	r3, r2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e093      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001480:	4b4b      	ldr	r3, [pc, #300]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0ee      	beq.n	800146a <HAL_RCC_OscConfig+0x376>
 800148c:	e014      	b.n	80014b8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148e:	f7ff f939 	bl	8000704 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001494:	e00a      	b.n	80014ac <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001496:	f7ff f935 	bl	8000704 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e07d      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ac:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1ee      	bne.n	8001496 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d105      	bne.n	80014ca <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014be:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a3b      	ldr	r2, [pc, #236]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 80014c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d069      	beq.n	80015a6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d2:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d061      	beq.n	80015a2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d146      	bne.n	8001574 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e6:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff f90a 	bl	8000704 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff f906 	bl	8000704 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e050      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151a:	d108      	bne.n	800152e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4921      	ldr	r1, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a19      	ldr	r1, [r3, #32]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	430b      	orrs	r3, r1
 8001540:	491b      	ldr	r1, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001542:	4313      	orrs	r3, r2
 8001544:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff f8da 	bl	8000704 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff f8d6 	bl	8000704 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e020      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x460>
 8001572:	e018      	b.n	80015a6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <HAL_RCC_OscConfig+0x4c4>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff f8c3 	bl	8000704 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001582:	f7ff f8bf 	bl	8000704 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e009      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_RCC_OscConfig+0x4bc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f0      	bne.n	8001582 <HAL_RCC_OscConfig+0x48e>
 80015a0:	e001      	b.n	80015a6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40007000 	.word	0x40007000
 80015b8:	42420060 	.word	0x42420060

080015bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015ca:	4b7e      	ldr	r3, [pc, #504]	; (80017c4 <HAL_RCC_ClockConfig+0x208>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d910      	bls.n	80015fa <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d8:	4b7a      	ldr	r3, [pc, #488]	; (80017c4 <HAL_RCC_ClockConfig+0x208>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 0207 	bic.w	r2, r3, #7
 80015e0:	4978      	ldr	r1, [pc, #480]	; (80017c4 <HAL_RCC_ClockConfig+0x208>)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015e8:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <HAL_RCC_ClockConfig+0x208>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d001      	beq.n	80015fa <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0e0      	b.n	80017bc <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d020      	beq.n	8001648 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001612:	4b6d      	ldr	r3, [pc, #436]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4a6c      	ldr	r2, [pc, #432]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 8001618:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800161c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800162a:	4b67      	ldr	r3, [pc, #412]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4a66      	ldr	r2, [pc, #408]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 8001630:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001634:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001636:	4b64      	ldr	r3, [pc, #400]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	4961      	ldr	r1, [pc, #388]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d06a      	beq.n	800172a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d107      	bne.n	800166c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165c:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d115      	bne.n	8001694 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0a7      	b.n	80017bc <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d107      	bne.n	8001684 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001674:	4b54      	ldr	r3, [pc, #336]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d109      	bne.n	8001694 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e09b      	b.n	80017bc <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e093      	b.n	80017bc <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001694:	4b4c      	ldr	r3, [pc, #304]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f023 0203 	bic.w	r2, r3, #3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4949      	ldr	r1, [pc, #292]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a6:	f7ff f82d 	bl	8000704 <HAL_GetTick>
 80016aa:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d112      	bne.n	80016da <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b6:	f7ff f825 	bl	8000704 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e077      	b.n	80017bc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016cc:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d1ee      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xfa>
 80016d8:	e027      	b.n	800172a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d11d      	bne.n	800171e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff f80e 	bl	8000704 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e060      	b.n	80017bc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b08      	cmp	r3, #8
 8001704:	d1ee      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x128>
 8001706:	e010      	b.n	800172a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001708:	f7fe fffc 	bl	8000704 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e04e      	b.n	80017bc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800171e:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ee      	bne.n	8001708 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <HAL_RCC_ClockConfig+0x208>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d210      	bcs.n	800175a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001738:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <HAL_RCC_ClockConfig+0x208>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 0207 	bic.w	r2, r3, #7
 8001740:	4920      	ldr	r1, [pc, #128]	; (80017c4 <HAL_RCC_ClockConfig+0x208>)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <HAL_RCC_ClockConfig+0x208>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d001      	beq.n	800175a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e030      	b.n	80017bc <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	2b00      	cmp	r3, #0
 8001764:	d008      	beq.n	8001778 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	4915      	ldr	r1, [pc, #84]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d009      	beq.n	8001798 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	490d      	ldr	r1, [pc, #52]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001798:	f000 f81c 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 800179c:	4601      	mov	r1, r0
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_RCC_ClockConfig+0x20c>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_RCC_ClockConfig+0x210>)
 80017aa:	5cd3      	ldrb	r3, [r2, r3]
 80017ac:	fa21 f303 	lsr.w	r3, r1, r3
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_RCC_ClockConfig+0x214>)
 80017b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7fe ff63 	bl	8000680 <HAL_InitTick>
  
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40022000 	.word	0x40022000
 80017c8:	40021000 	.word	0x40021000
 80017cc:	08003c84 	.word	0x08003c84
 80017d0:	20000008 	.word	0x20000008

080017d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d4:	b490      	push	{r4, r7}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017dc:	1d3c      	adds	r4, r7, #4
 80017de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017e4:	4b28      	ldr	r3, [pc, #160]	; (8001888 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b04      	cmp	r3, #4
 800180c:	d002      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x40>
 800180e:	2b08      	cmp	r3, #8
 8001810:	d003      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0x46>
 8001812:	e02d      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001816:	623b      	str	r3, [r7, #32]
      break;
 8001818:	e02d      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	0c9b      	lsrs	r3, r3, #18
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001826:	4413      	add	r3, r2
 8001828:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800182c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_RCC_GetSysClockFreq+0xb8>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	0c5b      	lsrs	r3, r3, #17
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001846:	4413      	add	r3, r2
 8001848:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800184c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001852:	fb02 f203 	mul.w	r2, r2, r3
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	fbb2 f3f3 	udiv	r3, r2, r3
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
 800185e:	e004      	b.n	800186a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	623b      	str	r3, [r7, #32]
      break;
 800186e:	e002      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001872:	623b      	str	r3, [r7, #32]
      break;
 8001874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001876:	6a3b      	ldr	r3, [r7, #32]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bc90      	pop	{r4, r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	08003c70 	.word	0x08003c70
 8001888:	08003c80 	.word	0x08003c80
 800188c:	40021000 	.word	0x40021000
 8001890:	007a1200 	.word	0x007a1200
 8001894:	003d0900 	.word	0x003d0900

08001898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800189c:	4b02      	ldr	r3, [pc, #8]	; (80018a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	20000008 	.word	0x20000008

080018ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018b0:	f7ff fff2 	bl	8001898 <HAL_RCC_GetHCLKFreq>
 80018b4:	4601      	mov	r1, r0
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	0a1b      	lsrs	r3, r3, #8
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	4a03      	ldr	r2, [pc, #12]	; (80018d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80018c8:	4618      	mov	r0, r3
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000
 80018d0:	08003c94 	.word	0x08003c94

080018d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018d8:	f7ff ffde 	bl	8001898 <HAL_RCC_GetHCLKFreq>
 80018dc:	4601      	mov	r1, r0
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	0adb      	lsrs	r3, r3, #11
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	4a03      	ldr	r2, [pc, #12]	; (80018f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ea:	5cd3      	ldrb	r3, [r2, r3]
 80018ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	08003c94 	.word	0x08003c94

080018fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <RCC_Delay+0x34>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <RCC_Delay+0x38>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0a5b      	lsrs	r3, r3, #9
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001918:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1e5a      	subs	r2, r3, #1
 800191e:	60fa      	str	r2, [r7, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f9      	bne.n	8001918 <RCC_Delay+0x1c>
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008
 8001934:	10624dd3 	.word	0x10624dd3

08001938 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e01d      	b.n	8001986 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f001 febc 	bl	80036dc <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3304      	adds	r3, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f000 fa2a 	bl	8001dd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0201 	orr.w	r2, r2, #1
 80019a4:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0201 	orr.w	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d122      	bne.n	8001a1e <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d11b      	bne.n	8001a1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f06f 0202 	mvn.w	r2, #2
 80019ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f9c8 	bl	8001d9a <HAL_TIM_IC_CaptureCallback>
 8001a0a:	e005      	b.n	8001a18 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f9bb 	bl	8001d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f9ca 	bl	8001dac <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d122      	bne.n	8001a72 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d11b      	bne.n	8001a72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f06f 0204 	mvn.w	r2, #4
 8001a42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f99e 	bl	8001d9a <HAL_TIM_IC_CaptureCallback>
 8001a5e:	e005      	b.n	8001a6c <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f991 	bl	8001d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f9a0 	bl	8001dac <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d122      	bne.n	8001ac6 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d11b      	bne.n	8001ac6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f06f 0208 	mvn.w	r2, #8
 8001a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f974 	bl	8001d9a <HAL_TIM_IC_CaptureCallback>
 8001ab2:	e005      	b.n	8001ac0 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f967 	bl	8001d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f976 	bl	8001dac <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b10      	cmp	r3, #16
 8001ad2:	d122      	bne.n	8001b1a <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b10      	cmp	r3, #16
 8001ae0:	d11b      	bne.n	8001b1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f06f 0210 	mvn.w	r2, #16
 8001aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2208      	movs	r2, #8
 8001af0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f94a 	bl	8001d9a <HAL_TIM_IC_CaptureCallback>
 8001b06:	e005      	b.n	8001b14 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f93d 	bl	8001d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f94c 	bl	8001dac <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d10e      	bne.n	8001b46 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d107      	bne.n	8001b46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f06f 0201 	mvn.w	r2, #1
 8001b3e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f001 fb0f 	bl	8003164 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b50:	2b80      	cmp	r3, #128	; 0x80
 8001b52:	d10e      	bne.n	8001b72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5e:	2b80      	cmp	r3, #128	; 0x80
 8001b60:	d107      	bne.n	8001b72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b6a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fa87 	bl	8002080 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7c:	2b40      	cmp	r3, #64	; 0x40
 8001b7e:	d10e      	bne.n	8001b9e <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8a:	2b40      	cmp	r3, #64	; 0x40
 8001b8c:	d107      	bne.n	8001b9e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b96:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f910 	bl	8001dbe <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	2b20      	cmp	r3, #32
 8001baa:	d10e      	bne.n	8001bca <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	2b20      	cmp	r3, #32
 8001bb8:	d107      	bne.n	8001bca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f06f 0220 	mvn.w	r2, #32
 8001bc2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 fa52 	bl	800206e <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_TIM_ConfigClockSource+0x1c>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e0c8      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x1ae>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c0c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c14:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b40      	cmp	r3, #64	; 0x40
 8001c24:	d077      	beq.n	8001d16 <HAL_TIM_ConfigClockSource+0x144>
 8001c26:	2b40      	cmp	r3, #64	; 0x40
 8001c28:	d80e      	bhi.n	8001c48 <HAL_TIM_ConfigClockSource+0x76>
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	f000 808a 	beq.w	8001d44 <HAL_TIM_ConfigClockSource+0x172>
 8001c30:	2b10      	cmp	r3, #16
 8001c32:	d802      	bhi.n	8001c3a <HAL_TIM_ConfigClockSource+0x68>
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d07e      	beq.n	8001d36 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001c38:	e099      	b.n	8001d6e <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	f000 8089 	beq.w	8001d52 <HAL_TIM_ConfigClockSource+0x180>
 8001c40:	2b30      	cmp	r3, #48	; 0x30
 8001c42:	f000 808d 	beq.w	8001d60 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8001c46:	e092      	b.n	8001d6e <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001c48:	2b70      	cmp	r3, #112	; 0x70
 8001c4a:	d016      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0xa8>
 8001c4c:	2b70      	cmp	r3, #112	; 0x70
 8001c4e:	d804      	bhi.n	8001c5a <HAL_TIM_ConfigClockSource+0x88>
 8001c50:	2b50      	cmp	r3, #80	; 0x50
 8001c52:	d040      	beq.n	8001cd6 <HAL_TIM_ConfigClockSource+0x104>
 8001c54:	2b60      	cmp	r3, #96	; 0x60
 8001c56:	d04e      	beq.n	8001cf6 <HAL_TIM_ConfigClockSource+0x124>
    break;
 8001c58:	e089      	b.n	8001d6e <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c5e:	d003      	beq.n	8001c68 <HAL_TIM_ConfigClockSource+0x96>
 8001c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c64:	d024      	beq.n	8001cb0 <HAL_TIM_ConfigClockSource+0xde>
    break;
 8001c66:	e082      	b.n	8001d6e <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0207 	bic.w	r2, r2, #7
 8001c76:	609a      	str	r2, [r3, #8]
    break;
 8001c78:	e079      	b.n	8001d6e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6899      	ldr	r1, [r3, #8]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f000 f98b 	bl	8001fa4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ca4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	609a      	str	r2, [r3, #8]
    break;
 8001cae:	e05e      	b.n	8001d6e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6899      	ldr	r1, [r3, #8]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f000 f970 	bl	8001fa4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cd2:	609a      	str	r2, [r3, #8]
    break;
 8001cd4:	e04b      	b.n	8001d6e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6859      	ldr	r1, [r3, #4]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f000 f8da 	bl	8001e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2150      	movs	r1, #80	; 0x50
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f939 	bl	8001f66 <TIM_ITRx_SetConfig>
    break;
 8001cf4:	e03b      	b.n	8001d6e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	6859      	ldr	r1, [r3, #4]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	461a      	mov	r2, r3
 8001d04:	f000 f8fc 	bl	8001f00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2160      	movs	r1, #96	; 0x60
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f929 	bl	8001f66 <TIM_ITRx_SetConfig>
    break;
 8001d14:	e02b      	b.n	8001d6e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6859      	ldr	r1, [r3, #4]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f000 f8ba 	bl	8001e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2140      	movs	r1, #64	; 0x40
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f919 	bl	8001f66 <TIM_ITRx_SetConfig>
    break;
 8001d34:	e01b      	b.n	8001d6e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 f912 	bl	8001f66 <TIM_ITRx_SetConfig>
    break;
 8001d42:	e014      	b.n	8001d6e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2110      	movs	r1, #16
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f90b 	bl	8001f66 <TIM_ITRx_SetConfig>
    break;
 8001d50:	e00d      	b.n	8001d6e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2120      	movs	r1, #32
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f904 	bl	8001f66 <TIM_ITRx_SetConfig>
    break;
 8001d5e:	e006      	b.n	8001d6e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2130      	movs	r1, #48	; 0x30
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f8fd 	bl	8001f66 <TIM_ITRx_SetConfig>
    break;
 8001d6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a2a      	ldr	r2, [pc, #168]	; (8001e90 <TIM_Base_SetConfig+0xc0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d00b      	beq.n	8001e04 <TIM_Base_SetConfig+0x34>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df2:	d007      	beq.n	8001e04 <TIM_Base_SetConfig+0x34>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <TIM_Base_SetConfig+0xc4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d003      	beq.n	8001e04 <TIM_Base_SetConfig+0x34>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <TIM_Base_SetConfig+0xc8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d108      	bne.n	8001e16 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <TIM_Base_SetConfig+0xc0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00b      	beq.n	8001e36 <TIM_Base_SetConfig+0x66>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e24:	d007      	beq.n	8001e36 <TIM_Base_SetConfig+0x66>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <TIM_Base_SetConfig+0xc4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d003      	beq.n	8001e36 <TIM_Base_SetConfig+0x66>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <TIM_Base_SetConfig+0xc8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d108      	bne.n	8001e48 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e4e:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <TIM_Base_SetConfig+0xc0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d103      	bne.n	8001e80 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	615a      	str	r2, [r3, #20]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	40012c00 	.word	0x40012c00
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40000800 	.word	0x40000800

08001e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	f023 0201 	bic.w	r2, r3, #1
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ece:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	f023 030a 	bic.w	r3, r3, #10
 8001ee0:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	621a      	str	r2, [r3, #32]
}
 8001ef6:	bf00      	nop
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f023 0210 	bic.w	r2, r3, #16
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	031b      	lsls	r3, r3, #12
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	621a      	str	r2, [r3, #32]
}
 8001f5c:	bf00      	nop
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f82:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	f043 0307 	orr.w	r3, r3, #7
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	609a      	str	r2, [r3, #8]
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	021a      	lsls	r2, r3, #8
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	609a      	str	r2, [r3, #8]
}
 8001fdc:	bf00      	nop
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e032      	b.n	8002064 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2202      	movs	r2, #2
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800201c:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800203e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6899      	ldr	r1, [r3, #8]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e03f      	b.n	8002124 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d106      	bne.n	80020be <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f001 fb35 	bl	8003728 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2224      	movs	r2, #36	; 0x24
 80020c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020d4:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fbb4 	bl	8002844 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020fa:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800210a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	4613      	mov	r3, r2
 8002138:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b20      	cmp	r3, #32
 8002144:	d140      	bne.n	80021c8 <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <HAL_UART_Receive_IT+0x26>
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e039      	b.n	80021ca <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_UART_Receive_IT+0x38>
 8002160:	2302      	movs	r3, #2
 8002162:	e032      	b.n	80021ca <HAL_UART_Receive_IT+0x9e>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	88fa      	ldrh	r2, [r7, #6]
 8002176:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2222      	movs	r2, #34	; 0x22
 8002188:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021a2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0220 	orr.w	r2, r2, #32
 80021c2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80021c8:	2302      	movs	r3, #2
  }
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d153      	bne.n	8002296 <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL) || (Size == 0U))
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <HAL_UART_Transmit_DMA+0x26>
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e04c      	b.n	8002298 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_UART_Transmit_DMA+0x38>
 8002208:	2302      	movs	r3, #2
 800220a:	e045      	b.n	8002298 <HAL_UART_Transmit_DMA+0xc4>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	88fa      	ldrh	r2, [r7, #6]
 800221e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	88fa      	ldrh	r2, [r7, #6]
 8002224:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2221      	movs	r2, #33	; 0x21
 8002230:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <HAL_UART_Transmit_DMA+0xcc>)
 800223a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	4a18      	ldr	r2, [pc, #96]	; (80022a4 <HAL_UART_Transmit_DMA+0xd0>)
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_UART_Transmit_DMA+0xd4>)
 800224a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	2200      	movs	r2, #0
 8002252:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
 8002254:	f107 0308 	add.w	r3, r7, #8
 8002258:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3304      	adds	r3, #4
 8002268:	461a      	mov	r2, r3
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	f7fe fbda 	bl	8000a24 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002278:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002290:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e000      	b.n	8002298 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002296:	2302      	movs	r3, #2
  }
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	080024db 	.word	0x080024db
 80022a4:	0800252d 	.word	0x0800252d
 80022a8:	08002549 	.word	0x08002549

080022ac <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10d      	bne.n	80022fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_UART_IRQHandler+0x52>
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fa23 	bl	8002742 <UART_Receive_IT>
      return;
 80022fc:	e0cc      	b.n	8002498 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80ab 	beq.w	800245c <HAL_UART_IRQHandler+0x1b0>
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d105      	bne.n	800231c <HAL_UART_IRQHandler+0x70>
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80a0 	beq.w	800245c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_UART_IRQHandler+0x90>
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002334:	f043 0201 	orr.w	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_UART_IRQHandler+0xb0>
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002354:	f043 0202 	orr.w	r2, r3, #2
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_UART_IRQHandler+0xd0>
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002374:	f043 0204 	orr.w	r2, r3, #4
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_UART_IRQHandler+0xf0>
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002394:	f043 0208 	orr.w	r2, r3, #8
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d078      	beq.n	8002496 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_UART_IRQHandler+0x112>
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f9c2 	bl	8002742 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf14      	ite	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2300      	moveq	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <HAL_UART_IRQHandler+0x13a>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d031      	beq.n	800244a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f90d 	bl	8002606 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d023      	beq.n	8002442 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002408:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240e:	2b00      	cmp	r3, #0
 8002410:	d013      	beq.n	800243a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002416:	4a22      	ldr	r2, [pc, #136]	; (80024a0 <HAL_UART_IRQHandler+0x1f4>)
 8002418:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fb60 	bl	8000ae4 <HAL_DMA_Abort_IT>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d016      	beq.n	8002458 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002434:	4610      	mov	r0, r2
 8002436:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002438:	e00e      	b.n	8002458 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f844 	bl	80024c8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002440:	e00a      	b.n	8002458 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f840 	bl	80024c8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002448:	e006      	b.n	8002458 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f83c 	bl	80024c8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002456:	e01e      	b.n	8002496 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002458:	bf00      	nop
    return;
 800245a:	e01c      	b.n	8002496 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_UART_IRQHandler+0x1cc>
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f8f9 	bl	8002668 <UART_Transmit_IT>
    return;
 8002476:	e00f      	b.n	8002498 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_UART_IRQHandler+0x1ec>
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f940 	bl	8002712 <UART_EndTransmit_IT>
    return;
 8002492:	bf00      	nop
 8002494:	e000      	b.n	8002498 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002496:	bf00      	nop
  }
}
 8002498:	3720      	adds	r7, #32
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	08002641 	.word	0x08002641

080024a4 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */ 
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d113      	bne.n	800251e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800250a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800251a:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 800251c:	e002      	b.n	8002524 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f7ff ffc0 	bl	80024a4 <HAL_UART_TxCpltCallback>
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f7ff ffbb 	bl	80024b6 <HAL_UART_TxHalfCpltCallback>
}
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b21      	cmp	r3, #33	; 0x21
 800257a:	d108      	bne.n	800258e <UART_DMAError+0x46>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2200      	movs	r2, #0
 8002586:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002588:	68b8      	ldr	r0, [r7, #8]
 800258a:	f000 f827 	bl	80025dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b22      	cmp	r3, #34	; 0x22
 80025ae:	d108      	bne.n	80025c2 <UART_DMAError+0x7a>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2200      	movs	r2, #0
 80025ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80025bc:	68b8      	ldr	r0, [r7, #8]
 80025be:	f000 f822 	bl	8002606 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	f043 0210 	orr.w	r2, r3, #16
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80025ce:	68b8      	ldr	r0, [r7, #8]
 80025d0:	f7ff ff7a 	bl	80024c8 <HAL_UART_ErrorCallback>
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80025f2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800261c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695a      	ldr	r2, [r3, #20]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0201 	bic.w	r2, r2, #1
 800262c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f7ff ff34 	bl	80024c8 <HAL_UART_ErrorCallback>
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b21      	cmp	r3, #33	; 0x21
 800267a:	d144      	bne.n	8002706 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002684:	d11a      	bne.n	80026bc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800269a:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	1c9a      	adds	r2, r3, #2
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	621a      	str	r2, [r3, #32]
 80026ae:	e00e      	b.n	80026ce <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	621a      	str	r2, [r3, #32]
 80026ba:	e008      	b.n	80026ce <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	1c59      	adds	r1, r3, #1
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6211      	str	r1, [r2, #32]
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4619      	mov	r1, r3
 80026dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10f      	bne.n	8002702 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002700:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002728:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff feb6 	bl	80024a4 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b22      	cmp	r3, #34	; 0x22
 8002754:	d171      	bne.n	800283a <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800275e:	d123      	bne.n	80027a8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10e      	bne.n	800278c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	b29b      	uxth	r3, r3
 8002776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	1c9a      	adds	r2, r3, #2
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	629a      	str	r2, [r3, #40]	; 0x28
 800278a:	e029      	b.n	80027e0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	b29b      	uxth	r3, r3
 8002794:	b2db      	uxtb	r3, r3
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	629a      	str	r2, [r3, #40]	; 0x28
 80027a6:	e01b      	b.n	80027e0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10a      	bne.n	80027c6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6858      	ldr	r0, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	1c59      	adds	r1, r3, #1
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6291      	str	r1, [r2, #40]	; 0x28
 80027c0:	b2c2      	uxtb	r2, r0
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e00c      	b.n	80027e0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	1c58      	adds	r0, r3, #1
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	6288      	str	r0, [r1, #40]	; 0x28
 80027d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	4619      	mov	r1, r3
 80027ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d120      	bne.n	8002836 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0220 	bic.w	r2, r2, #32
 8002802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002812:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fc87 	bl	8003140 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e002      	b.n	800283c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
  }
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002844:	b5b0      	push	{r4, r5, r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002886:	f023 030c 	bic.w	r3, r3, #12
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	68f9      	ldr	r1, [r7, #12]
 8002890:	430b      	orrs	r3, r1
 8002892:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a6f      	ldr	r2, [pc, #444]	; (8002a6c <UART_SetConfig+0x228>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d16b      	bne.n	800298c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80028b4:	f7ff f80e 	bl	80018d4 <HAL_RCC_GetPCLK2Freq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	009a      	lsls	r2, r3, #2
 80028c2:	441a      	add	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ce:	4a68      	ldr	r2, [pc, #416]	; (8002a70 <UART_SetConfig+0x22c>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	095b      	lsrs	r3, r3, #5
 80028d6:	011c      	lsls	r4, r3, #4
 80028d8:	f7fe fffc 	bl	80018d4 <HAL_RCC_GetPCLK2Freq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	009a      	lsls	r2, r3, #2
 80028e6:	441a      	add	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	fbb2 f5f3 	udiv	r5, r2, r3
 80028f2:	f7fe ffef 	bl	80018d4 <HAL_RCC_GetPCLK2Freq>
 80028f6:	4602      	mov	r2, r0
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	009a      	lsls	r2, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	fbb2 f3f3 	udiv	r3, r2, r3
 800290c:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <UART_SetConfig+0x22c>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2264      	movs	r2, #100	; 0x64
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	3332      	adds	r3, #50	; 0x32
 8002920:	4a53      	ldr	r2, [pc, #332]	; (8002a70 <UART_SetConfig+0x22c>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800292c:	441c      	add	r4, r3
 800292e:	f7fe ffd1 	bl	80018d4 <HAL_RCC_GetPCLK2Freq>
 8002932:	4602      	mov	r2, r0
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	009a      	lsls	r2, r3, #2
 800293c:	441a      	add	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	fbb2 f5f3 	udiv	r5, r2, r3
 8002948:	f7fe ffc4 	bl	80018d4 <HAL_RCC_GetPCLK2Freq>
 800294c:	4602      	mov	r2, r0
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	009a      	lsls	r2, r3, #2
 8002956:	441a      	add	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002962:	4a43      	ldr	r2, [pc, #268]	; (8002a70 <UART_SetConfig+0x22c>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	2264      	movs	r2, #100	; 0x64
 800296c:	fb02 f303 	mul.w	r3, r2, r3
 8002970:	1aeb      	subs	r3, r5, r3
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	3332      	adds	r3, #50	; 0x32
 8002976:	4a3e      	ldr	r2, [pc, #248]	; (8002a70 <UART_SetConfig+0x22c>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	f003 020f 	and.w	r2, r3, #15
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4422      	add	r2, r4
 8002988:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800298a:	e06a      	b.n	8002a62 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800298c:	f7fe ff8e 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8002990:	4602      	mov	r2, r0
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	009a      	lsls	r2, r3, #2
 800299a:	441a      	add	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a6:	4a32      	ldr	r2, [pc, #200]	; (8002a70 <UART_SetConfig+0x22c>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	011c      	lsls	r4, r3, #4
 80029b0:	f7fe ff7c 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	009a      	lsls	r2, r3, #2
 80029be:	441a      	add	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	fbb2 f5f3 	udiv	r5, r2, r3
 80029ca:	f7fe ff6f 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	009a      	lsls	r2, r3, #2
 80029d8:	441a      	add	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	4a22      	ldr	r2, [pc, #136]	; (8002a70 <UART_SetConfig+0x22c>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2264      	movs	r2, #100	; 0x64
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	1aeb      	subs	r3, r5, r3
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	3332      	adds	r3, #50	; 0x32
 80029f8:	4a1d      	ldr	r2, [pc, #116]	; (8002a70 <UART_SetConfig+0x22c>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a04:	441c      	add	r4, r3
 8002a06:	f7fe ff51 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	009a      	lsls	r2, r3, #2
 8002a14:	441a      	add	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a20:	f7fe ff44 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8002a24:	4602      	mov	r2, r0
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009a      	lsls	r2, r3, #2
 8002a2e:	441a      	add	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <UART_SetConfig+0x22c>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	2264      	movs	r2, #100	; 0x64
 8002a44:	fb02 f303 	mul.w	r3, r2, r3
 8002a48:	1aeb      	subs	r3, r5, r3
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	3332      	adds	r3, #50	; 0x32
 8002a4e:	4a08      	ldr	r2, [pc, #32]	; (8002a70 <UART_SetConfig+0x22c>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	f003 020f 	and.w	r2, r3, #15
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4422      	add	r2, r4
 8002a60:	609a      	str	r2, [r3, #8]
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bdb0      	pop	{r4, r5, r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40013800 	.word	0x40013800
 8002a70:	51eb851f 	.word	0x51eb851f

08002a74 <CTL_Ini>:
*  Parameter(s)   :  
*  Return Value   :  
******************************************************************************/

void CTL_Ini (void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	///////////////////////////////////////////////
	// Init BLDC Motors
	///////////////////////////////////////////////

	// Wait for BLCD Controller startup. Then send messages.
	HAL_Delay(1000);
 8002a78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a7c:	f7fd fe4c 	bl	8000718 <HAL_Delay>

	// Application Mode
	au8Temp[CMD] = CMD_HALL;
 8002a80:	4b45      	ldr	r3, [pc, #276]	; (8002b98 <CTL_Ini+0x124>)
 8002a82:	2213      	movs	r2, #19
 8002a84:	701a      	strb	r2, [r3, #0]
	SER2_Send_Protocol(au8Temp, 1);
 8002a86:	2101      	movs	r1, #1
 8002a88:	4843      	ldr	r0, [pc, #268]	; (8002b98 <CTL_Ini+0x124>)
 8002a8a:	f000 fbef 	bl	800326c <SER2_Send_Protocol>
	SER1_Send_Protocol(au8Temp, 1);
 8002a8e:	2101      	movs	r1, #1
 8002a90:	4841      	ldr	r0, [pc, #260]	; (8002b98 <CTL_Ini+0x124>)
 8002a92:	f000 fb97 	bl	80031c4 <SER1_Send_Protocol>
	HAL_UART_Transmit_DMA(&huart1, SER1_au8SndBuf, SER1_TransmitFrameLength);
 8002a96:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <CTL_Ini+0x128>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4940      	ldr	r1, [pc, #256]	; (8002ba0 <CTL_Ini+0x12c>)
 8002aa0:	4840      	ldr	r0, [pc, #256]	; (8002ba4 <CTL_Ini+0x130>)
 8002aa2:	f7ff fb97 	bl	80021d4 <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit_DMA(&huart2, SER2_au8SndBuf, SER2_TransmitFrameLength);
 8002aa6:	4b40      	ldr	r3, [pc, #256]	; (8002ba8 <CTL_Ini+0x134>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	493f      	ldr	r1, [pc, #252]	; (8002bac <CTL_Ini+0x138>)
 8002ab0:	483f      	ldr	r0, [pc, #252]	; (8002bb0 <CTL_Ini+0x13c>)
 8002ab2:	f7ff fb8f 	bl	80021d4 <HAL_UART_Transmit_DMA>
	HAL_Delay(100);
 8002ab6:	2064      	movs	r0, #100	; 0x64
 8002ab8:	f7fd fe2e 	bl	8000718 <HAL_Delay>

	// Hall Information
	au8Temp[CMD] = CMD_SET_HALL_INFORMATION;
 8002abc:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <CTL_Ini+0x124>)
 8002abe:	2216      	movs	r2, #22
 8002ac0:	701a      	strb	r2, [r3, #0]
	au8Temp[DATA + 0] = 6;
 8002ac2:	4b35      	ldr	r3, [pc, #212]	; (8002b98 <CTL_Ini+0x124>)
 8002ac4:	2206      	movs	r2, #6
 8002ac6:	705a      	strb	r2, [r3, #1]
	au8Temp[DATA + 1] = 2;
 8002ac8:	4b33      	ldr	r3, [pc, #204]	; (8002b98 <CTL_Ini+0x124>)
 8002aca:	2202      	movs	r2, #2
 8002acc:	709a      	strb	r2, [r3, #2]
	au8Temp[DATA + 2] = 1;
 8002ace:	4b32      	ldr	r3, [pc, #200]	; (8002b98 <CTL_Ini+0x124>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	70da      	strb	r2, [r3, #3]
	au8Temp[DATA + 3] = 4;
 8002ad4:	4b30      	ldr	r3, [pc, #192]	; (8002b98 <CTL_Ini+0x124>)
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	711a      	strb	r2, [r3, #4]
	au8Temp[DATA + 4] = 5;
 8002ada:	4b2f      	ldr	r3, [pc, #188]	; (8002b98 <CTL_Ini+0x124>)
 8002adc:	2205      	movs	r2, #5
 8002ade:	715a      	strb	r2, [r3, #5]
	au8Temp[DATA + 5] = 3;
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <CTL_Ini+0x124>)
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	719a      	strb	r2, [r3, #6]
	SER2_Send_Protocol(au8Temp, 7);
 8002ae6:	2107      	movs	r1, #7
 8002ae8:	482b      	ldr	r0, [pc, #172]	; (8002b98 <CTL_Ini+0x124>)
 8002aea:	f000 fbbf 	bl	800326c <SER2_Send_Protocol>
	SER1_Send_Protocol(au8Temp, 7);
 8002aee:	2107      	movs	r1, #7
 8002af0:	4829      	ldr	r0, [pc, #164]	; (8002b98 <CTL_Ini+0x124>)
 8002af2:	f000 fb67 	bl	80031c4 <SER1_Send_Protocol>
	HAL_UART_Transmit_DMA(&huart1, SER1_au8SndBuf, SER1_TransmitFrameLength);
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <CTL_Ini+0x128>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	4928      	ldr	r1, [pc, #160]	; (8002ba0 <CTL_Ini+0x12c>)
 8002b00:	4828      	ldr	r0, [pc, #160]	; (8002ba4 <CTL_Ini+0x130>)
 8002b02:	f7ff fb67 	bl	80021d4 <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit_DMA(&huart2, SER2_au8SndBuf, SER2_TransmitFrameLength);
 8002b06:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <CTL_Ini+0x134>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4927      	ldr	r1, [pc, #156]	; (8002bac <CTL_Ini+0x138>)
 8002b10:	4827      	ldr	r0, [pc, #156]	; (8002bb0 <CTL_Ini+0x13c>)
 8002b12:	f7ff fb5f 	bl	80021d4 <HAL_UART_Transmit_DMA>
	HAL_Delay(100);
 8002b16:	2064      	movs	r0, #100	; 0x64
 8002b18:	f7fd fdfe 	bl	8000718 <HAL_Delay>

	// Operation Mode
	au8Temp[CMD] = CMD_STEUERUNG;
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <CTL_Ini+0x124>)
 8002b1e:	2217      	movs	r2, #23
 8002b20:	701a      	strb	r2, [r3, #0]
	SER2_Send_Protocol(au8Temp, 1);
 8002b22:	2101      	movs	r1, #1
 8002b24:	481c      	ldr	r0, [pc, #112]	; (8002b98 <CTL_Ini+0x124>)
 8002b26:	f000 fba1 	bl	800326c <SER2_Send_Protocol>
	SER1_Send_Protocol(au8Temp, 1);
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	481a      	ldr	r0, [pc, #104]	; (8002b98 <CTL_Ini+0x124>)
 8002b2e:	f000 fb49 	bl	80031c4 <SER1_Send_Protocol>
	HAL_UART_Transmit_DMA(&huart1, SER1_au8SndBuf, SER1_TransmitFrameLength);
 8002b32:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <CTL_Ini+0x128>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4919      	ldr	r1, [pc, #100]	; (8002ba0 <CTL_Ini+0x12c>)
 8002b3c:	4819      	ldr	r0, [pc, #100]	; (8002ba4 <CTL_Ini+0x130>)
 8002b3e:	f7ff fb49 	bl	80021d4 <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit_DMA(&huart2, SER2_au8SndBuf, SER2_TransmitFrameLength);
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <CTL_Ini+0x134>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4918      	ldr	r1, [pc, #96]	; (8002bac <CTL_Ini+0x138>)
 8002b4c:	4818      	ldr	r0, [pc, #96]	; (8002bb0 <CTL_Ini+0x13c>)
 8002b4e:	f7ff fb41 	bl	80021d4 <HAL_UART_Transmit_DMA>
	HAL_Delay(100);
 8002b52:	2064      	movs	r0, #100	; 0x64
 8002b54:	f7fd fde0 	bl	8000718 <HAL_Delay>

	// Get State
	au8Temp[CMD] = CMD_GET_STATE_REQUEST;
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <CTL_Ini+0x124>)
 8002b5a:	2219      	movs	r2, #25
 8002b5c:	701a      	strb	r2, [r3, #0]
	SER2_Send_Protocol(au8Temp, 1);
 8002b5e:	2101      	movs	r1, #1
 8002b60:	480d      	ldr	r0, [pc, #52]	; (8002b98 <CTL_Ini+0x124>)
 8002b62:	f000 fb83 	bl	800326c <SER2_Send_Protocol>
	SER1_Send_Protocol(au8Temp, 1);
 8002b66:	2101      	movs	r1, #1
 8002b68:	480b      	ldr	r0, [pc, #44]	; (8002b98 <CTL_Ini+0x124>)
 8002b6a:	f000 fb2b 	bl	80031c4 <SER1_Send_Protocol>
	HAL_UART_Transmit_DMA(&huart1, SER1_au8SndBuf, SER1_TransmitFrameLength);
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <CTL_Ini+0x128>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	490a      	ldr	r1, [pc, #40]	; (8002ba0 <CTL_Ini+0x12c>)
 8002b78:	480a      	ldr	r0, [pc, #40]	; (8002ba4 <CTL_Ini+0x130>)
 8002b7a:	f7ff fb2b 	bl	80021d4 <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit_DMA(&huart2, SER2_au8SndBuf, SER2_TransmitFrameLength);
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <CTL_Ini+0x134>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	4909      	ldr	r1, [pc, #36]	; (8002bac <CTL_Ini+0x138>)
 8002b88:	4809      	ldr	r0, [pc, #36]	; (8002bb0 <CTL_Ini+0x13c>)
 8002b8a:	f7ff fb23 	bl	80021d4 <HAL_UART_Transmit_DMA>
	HAL_Delay(100);
 8002b8e:	2064      	movs	r0, #100	; 0x64
 8002b90:	f7fd fdc2 	bl	8000718 <HAL_Delay>




}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000088 	.word	0x20000088
 8002b9c:	2000085d 	.word	0x2000085d
 8002ba0:	20000964 	.word	0x20000964
 8002ba4:	20000254 	.word	0x20000254
 8002ba8:	2000126d 	.word	0x2000126d
 8002bac:	20000d68 	.word	0x20000d68
 8002bb0:	200002d8 	.word	0x200002d8

08002bb4 <CTL_Main>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void CTL_Main (void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0

  switch (ctl_State)
 8002bba:	4b92      	ldr	r3, [pc, #584]	; (8002e04 <CTL_Main+0x250>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d002      	beq.n	8002bc8 <CTL_Main+0x14>
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d049      	beq.n	8002c5a <CTL_Main+0xa6>
  		  break;

  	  case TIMEOUT:
  		  	  	  	  break;

  	  default: break;
 8002bc6:	e04b      	b.n	8002c60 <CTL_Main+0xac>
  		  if (CTL_u32Timeout_Counter > 1000)
 8002bc8:	4b8f      	ldr	r3, [pc, #572]	; (8002e08 <CTL_Main+0x254>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bd0:	d945      	bls.n	8002c5e <CTL_Main+0xaa>
				au8Temp[CMD] = SET_DIR_PWM;
 8002bd2:	4b8e      	ldr	r3, [pc, #568]	; (8002e0c <CTL_Main+0x258>)
 8002bd4:	2225      	movs	r2, #37	; 0x25
 8002bd6:	701a      	strb	r2, [r3, #0]
				au8Temp[DIRECTION] = 0;
 8002bd8:	4b8c      	ldr	r3, [pc, #560]	; (8002e0c <CTL_Main+0x258>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	705a      	strb	r2, [r3, #1]
				unAnyData.u16Data = 0;
 8002bde:	4b8c      	ldr	r3, [pc, #560]	; (8002e10 <CTL_Main+0x25c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	801a      	strh	r2, [r3, #0]
				au8Temp[PWM + 0] = unAnyData.au8Data[0];
 8002be4:	4b8a      	ldr	r3, [pc, #552]	; (8002e10 <CTL_Main+0x25c>)
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	4b88      	ldr	r3, [pc, #544]	; (8002e0c <CTL_Main+0x258>)
 8002bea:	709a      	strb	r2, [r3, #2]
				au8Temp[PWM + 1] = unAnyData.au8Data[1];
 8002bec:	4b88      	ldr	r3, [pc, #544]	; (8002e10 <CTL_Main+0x25c>)
 8002bee:	785a      	ldrb	r2, [r3, #1]
 8002bf0:	4b86      	ldr	r3, [pc, #536]	; (8002e0c <CTL_Main+0x258>)
 8002bf2:	70da      	strb	r2, [r3, #3]
				SER2_Send_Protocol(au8Temp, 4);
 8002bf4:	2104      	movs	r1, #4
 8002bf6:	4885      	ldr	r0, [pc, #532]	; (8002e0c <CTL_Main+0x258>)
 8002bf8:	f000 fb38 	bl	800326c <SER2_Send_Protocol>
				HAL_UART_Transmit_DMA(&huart2, SER2_au8SndBuf, SER2_TransmitFrameLength);
 8002bfc:	4b85      	ldr	r3, [pc, #532]	; (8002e14 <CTL_Main+0x260>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	4984      	ldr	r1, [pc, #528]	; (8002e18 <CTL_Main+0x264>)
 8002c06:	4885      	ldr	r0, [pc, #532]	; (8002e1c <CTL_Main+0x268>)
 8002c08:	f7ff fae4 	bl	80021d4 <HAL_UART_Transmit_DMA>
				HAL_Delay(10);
 8002c0c:	200a      	movs	r0, #10
 8002c0e:	f7fd fd83 	bl	8000718 <HAL_Delay>
				au8Temp[CMD] = SET_DIR_PWM;
 8002c12:	4b7e      	ldr	r3, [pc, #504]	; (8002e0c <CTL_Main+0x258>)
 8002c14:	2225      	movs	r2, #37	; 0x25
 8002c16:	701a      	strb	r2, [r3, #0]
				au8Temp[DIRECTION] = 0;
 8002c18:	4b7c      	ldr	r3, [pc, #496]	; (8002e0c <CTL_Main+0x258>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	705a      	strb	r2, [r3, #1]
				unAnyData.u16Data = 0;
 8002c1e:	4b7c      	ldr	r3, [pc, #496]	; (8002e10 <CTL_Main+0x25c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	801a      	strh	r2, [r3, #0]
				au8Temp[PWM + 0] = unAnyData.au8Data[0];
 8002c24:	4b7a      	ldr	r3, [pc, #488]	; (8002e10 <CTL_Main+0x25c>)
 8002c26:	781a      	ldrb	r2, [r3, #0]
 8002c28:	4b78      	ldr	r3, [pc, #480]	; (8002e0c <CTL_Main+0x258>)
 8002c2a:	709a      	strb	r2, [r3, #2]
				au8Temp[PWM + 1] = unAnyData.au8Data[1];
 8002c2c:	4b78      	ldr	r3, [pc, #480]	; (8002e10 <CTL_Main+0x25c>)
 8002c2e:	785a      	ldrb	r2, [r3, #1]
 8002c30:	4b76      	ldr	r3, [pc, #472]	; (8002e0c <CTL_Main+0x258>)
 8002c32:	70da      	strb	r2, [r3, #3]
				SER1_Send_Protocol(au8Temp, 4);
 8002c34:	2104      	movs	r1, #4
 8002c36:	4875      	ldr	r0, [pc, #468]	; (8002e0c <CTL_Main+0x258>)
 8002c38:	f000 fac4 	bl	80031c4 <SER1_Send_Protocol>
				HAL_UART_Transmit_DMA(&huart1, SER1_au8SndBuf, SER1_TransmitFrameLength);
 8002c3c:	4b78      	ldr	r3, [pc, #480]	; (8002e20 <CTL_Main+0x26c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	4977      	ldr	r1, [pc, #476]	; (8002e24 <CTL_Main+0x270>)
 8002c46:	4878      	ldr	r0, [pc, #480]	; (8002e28 <CTL_Main+0x274>)
 8002c48:	f7ff fac4 	bl	80021d4 <HAL_UART_Transmit_DMA>
				HAL_Delay(10);
 8002c4c:	200a      	movs	r0, #10
 8002c4e:	f7fd fd63 	bl	8000718 <HAL_Delay>
  			  ctl_State = TIMEOUT;
 8002c52:	4b6c      	ldr	r3, [pc, #432]	; (8002e04 <CTL_Main+0x250>)
 8002c54:	2202      	movs	r2, #2
 8002c56:	701a      	strb	r2, [r3, #0]
  		  break;
 8002c58:	e001      	b.n	8002c5e <CTL_Main+0xaa>
  		  	  	  	  break;
 8002c5a:	bf00      	nop
 8002c5c:	e000      	b.n	8002c60 <CTL_Main+0xac>
  		  break;
 8002c5e:	bf00      	nop
  }



  if (!SER3_u8Valid_Data())
 8002c60:	f000 fc12 	bl	8003488 <SER3_u8Valid_Data>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d103      	bne.n	8002c72 <CTL_Main+0xbe>
  {
	SER3_Protocol_Handling(100);
 8002c6a:	2064      	movs	r0, #100	; 0x64
 8002c6c:	f000 fb32 	bl	80032d4 <SER3_Protocol_Handling>


  }


}
 8002c70:	e0c4      	b.n	8002dfc <CTL_Main+0x248>
	unAnyData.au8Data[0] = SER3_au8RecBuf[0];
 8002c72:	4b6e      	ldr	r3, [pc, #440]	; (8002e2c <CTL_Main+0x278>)
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	4b66      	ldr	r3, [pc, #408]	; (8002e10 <CTL_Main+0x25c>)
 8002c78:	701a      	strb	r2, [r3, #0]
	unAnyData.au8Data[1] = SER3_au8RecBuf[1];
 8002c7a:	4b6c      	ldr	r3, [pc, #432]	; (8002e2c <CTL_Main+0x278>)
 8002c7c:	785a      	ldrb	r2, [r3, #1]
 8002c7e:	4b64      	ldr	r3, [pc, #400]	; (8002e10 <CTL_Main+0x25c>)
 8002c80:	705a      	strb	r2, [r3, #1]
	u16Thro = unAnyData.u16Data;
 8002c82:	4b63      	ldr	r3, [pc, #396]	; (8002e10 <CTL_Main+0x25c>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	81fb      	strh	r3, [r7, #14]
	unAnyData.au8Data[0] = SER3_au8RecBuf[2];
 8002c88:	4b68      	ldr	r3, [pc, #416]	; (8002e2c <CTL_Main+0x278>)
 8002c8a:	789a      	ldrb	r2, [r3, #2]
 8002c8c:	4b60      	ldr	r3, [pc, #384]	; (8002e10 <CTL_Main+0x25c>)
 8002c8e:	701a      	strb	r2, [r3, #0]
	unAnyData.au8Data[1] = SER3_au8RecBuf[3];
 8002c90:	4b66      	ldr	r3, [pc, #408]	; (8002e2c <CTL_Main+0x278>)
 8002c92:	78da      	ldrb	r2, [r3, #3]
 8002c94:	4b5e      	ldr	r3, [pc, #376]	; (8002e10 <CTL_Main+0x25c>)
 8002c96:	705a      	strb	r2, [r3, #1]
	u16Elev = unAnyData.u16Data;
 8002c98:	4b5d      	ldr	r3, [pc, #372]	; (8002e10 <CTL_Main+0x25c>)
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	81bb      	strh	r3, [r7, #12]
	memset((char*)SER3_au8RecBuf, 0, sizeof(SER3_au8RecBuf));
 8002c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4861      	ldr	r0, [pc, #388]	; (8002e2c <CTL_Main+0x278>)
 8002ca6:	f000 ffce 	bl	8003c46 <memset>
	if (((u16Thro >= 1070) && (u16Thro <= 1920)) && ((u16Elev >= 1070) && (u16Elev <= 1920)))
 8002caa:	89fb      	ldrh	r3, [r7, #14]
 8002cac:	f240 422d 	movw	r2, #1069	; 0x42d
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d963      	bls.n	8002d7c <CTL_Main+0x1c8>
 8002cb4:	89fb      	ldrh	r3, [r7, #14]
 8002cb6:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8002cba:	d85f      	bhi.n	8002d7c <CTL_Main+0x1c8>
 8002cbc:	89bb      	ldrh	r3, [r7, #12]
 8002cbe:	f240 422d 	movw	r2, #1069	; 0x42d
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d95a      	bls.n	8002d7c <CTL_Main+0x1c8>
 8002cc6:	89bb      	ldrh	r3, [r7, #12]
 8002cc8:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8002ccc:	d856      	bhi.n	8002d7c <CTL_Main+0x1c8>
		ctl_State = NORMAL;
 8002cce:	4b4d      	ldr	r3, [pc, #308]	; (8002e04 <CTL_Main+0x250>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
		CTL_u32Timeout_Counter = 0;
 8002cd4:	4b4c      	ldr	r3, [pc, #304]	; (8002e08 <CTL_Main+0x254>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
		stSteering = STE1_Calculation (u16Thro, u16Elev);
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	89ba      	ldrh	r2, [r7, #12]
 8002cde:	89f9      	ldrh	r1, [r7, #14]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fc3d 	bl	8003560 <STE1_Calculation>
		au8Temp[CMD] = SET_DIR_PWM;
 8002ce6:	4b49      	ldr	r3, [pc, #292]	; (8002e0c <CTL_Main+0x258>)
 8002ce8:	2225      	movs	r2, #37	; 0x25
 8002cea:	701a      	strb	r2, [r3, #0]
		au8Temp[DIRECTION] = stSteering.u8Motor_Left_Dir;
 8002cec:	79ba      	ldrb	r2, [r7, #6]
 8002cee:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <CTL_Main+0x258>)
 8002cf0:	705a      	strb	r2, [r3, #1]
		unAnyData.u16Data = stSteering.u16Motor_Left_Speed + 150;
 8002cf2:	88bb      	ldrh	r3, [r7, #4]
 8002cf4:	3396      	adds	r3, #150	; 0x96
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	4b45      	ldr	r3, [pc, #276]	; (8002e10 <CTL_Main+0x25c>)
 8002cfa:	801a      	strh	r2, [r3, #0]
		au8Temp[PWM + 0] = unAnyData.au8Data[0];
 8002cfc:	4b44      	ldr	r3, [pc, #272]	; (8002e10 <CTL_Main+0x25c>)
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	4b42      	ldr	r3, [pc, #264]	; (8002e0c <CTL_Main+0x258>)
 8002d02:	709a      	strb	r2, [r3, #2]
		au8Temp[PWM + 1] = unAnyData.au8Data[1];
 8002d04:	4b42      	ldr	r3, [pc, #264]	; (8002e10 <CTL_Main+0x25c>)
 8002d06:	785a      	ldrb	r2, [r3, #1]
 8002d08:	4b40      	ldr	r3, [pc, #256]	; (8002e0c <CTL_Main+0x258>)
 8002d0a:	70da      	strb	r2, [r3, #3]
		SER2_Send_Protocol(au8Temp, 4);
 8002d0c:	2104      	movs	r1, #4
 8002d0e:	483f      	ldr	r0, [pc, #252]	; (8002e0c <CTL_Main+0x258>)
 8002d10:	f000 faac 	bl	800326c <SER2_Send_Protocol>
		HAL_UART_Transmit_DMA(&huart2, SER2_au8SndBuf, SER2_TransmitFrameLength);
 8002d14:	4b3f      	ldr	r3, [pc, #252]	; (8002e14 <CTL_Main+0x260>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	493e      	ldr	r1, [pc, #248]	; (8002e18 <CTL_Main+0x264>)
 8002d1e:	483f      	ldr	r0, [pc, #252]	; (8002e1c <CTL_Main+0x268>)
 8002d20:	f7ff fa58 	bl	80021d4 <HAL_UART_Transmit_DMA>
		HAL_Delay(10);
 8002d24:	200a      	movs	r0, #10
 8002d26:	f7fd fcf7 	bl	8000718 <HAL_Delay>
		au8Temp[CMD] = SET_DIR_PWM;
 8002d2a:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <CTL_Main+0x258>)
 8002d2c:	2225      	movs	r2, #37	; 0x25
 8002d2e:	701a      	strb	r2, [r3, #0]
		au8Temp[DIRECTION] = stSteering.u8Motor_Right_Dir ? 0 : 1;
 8002d30:	7abb      	ldrb	r3, [r7, #10]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b33      	ldr	r3, [pc, #204]	; (8002e0c <CTL_Main+0x258>)
 8002d40:	705a      	strb	r2, [r3, #1]
		unAnyData.u16Data = stSteering.u16Motor_Right_Speed + 150;
 8002d42:	893b      	ldrh	r3, [r7, #8]
 8002d44:	3396      	adds	r3, #150	; 0x96
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <CTL_Main+0x25c>)
 8002d4a:	801a      	strh	r2, [r3, #0]
		au8Temp[PWM + 0] = unAnyData.au8Data[0];
 8002d4c:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <CTL_Main+0x25c>)
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	4b2e      	ldr	r3, [pc, #184]	; (8002e0c <CTL_Main+0x258>)
 8002d52:	709a      	strb	r2, [r3, #2]
		au8Temp[PWM + 1] = unAnyData.au8Data[1];
 8002d54:	4b2e      	ldr	r3, [pc, #184]	; (8002e10 <CTL_Main+0x25c>)
 8002d56:	785a      	ldrb	r2, [r3, #1]
 8002d58:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <CTL_Main+0x258>)
 8002d5a:	70da      	strb	r2, [r3, #3]
		SER1_Send_Protocol(au8Temp, 4);
 8002d5c:	2104      	movs	r1, #4
 8002d5e:	482b      	ldr	r0, [pc, #172]	; (8002e0c <CTL_Main+0x258>)
 8002d60:	f000 fa30 	bl	80031c4 <SER1_Send_Protocol>
		HAL_UART_Transmit_DMA(&huart1, SER1_au8SndBuf, SER1_TransmitFrameLength);
 8002d64:	4b2e      	ldr	r3, [pc, #184]	; (8002e20 <CTL_Main+0x26c>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	492d      	ldr	r1, [pc, #180]	; (8002e24 <CTL_Main+0x270>)
 8002d6e:	482e      	ldr	r0, [pc, #184]	; (8002e28 <CTL_Main+0x274>)
 8002d70:	f7ff fa30 	bl	80021d4 <HAL_UART_Transmit_DMA>
		HAL_Delay(10);
 8002d74:	200a      	movs	r0, #10
 8002d76:	f7fd fccf 	bl	8000718 <HAL_Delay>
}
 8002d7a:	e03f      	b.n	8002dfc <CTL_Main+0x248>
		au8Temp[CMD] = SET_DIR_PWM;
 8002d7c:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <CTL_Main+0x258>)
 8002d7e:	2225      	movs	r2, #37	; 0x25
 8002d80:	701a      	strb	r2, [r3, #0]
		au8Temp[DIRECTION] = 1;
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <CTL_Main+0x258>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	705a      	strb	r2, [r3, #1]
		unAnyData.u16Data = 0;
 8002d88:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <CTL_Main+0x25c>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	801a      	strh	r2, [r3, #0]
		au8Temp[PWM + 0] = unAnyData.au8Data[0];
 8002d8e:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <CTL_Main+0x25c>)
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <CTL_Main+0x258>)
 8002d94:	709a      	strb	r2, [r3, #2]
		au8Temp[PWM + 1] = unAnyData.au8Data[1];
 8002d96:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <CTL_Main+0x25c>)
 8002d98:	785a      	ldrb	r2, [r3, #1]
 8002d9a:	4b1c      	ldr	r3, [pc, #112]	; (8002e0c <CTL_Main+0x258>)
 8002d9c:	70da      	strb	r2, [r3, #3]
		SER2_Send_Protocol(au8Temp, 4);
 8002d9e:	2104      	movs	r1, #4
 8002da0:	481a      	ldr	r0, [pc, #104]	; (8002e0c <CTL_Main+0x258>)
 8002da2:	f000 fa63 	bl	800326c <SER2_Send_Protocol>
		HAL_UART_Transmit_DMA(&huart2, SER2_au8SndBuf, SER2_TransmitFrameLength);
 8002da6:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <CTL_Main+0x260>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	491a      	ldr	r1, [pc, #104]	; (8002e18 <CTL_Main+0x264>)
 8002db0:	481a      	ldr	r0, [pc, #104]	; (8002e1c <CTL_Main+0x268>)
 8002db2:	f7ff fa0f 	bl	80021d4 <HAL_UART_Transmit_DMA>
		HAL_Delay(10);
 8002db6:	200a      	movs	r0, #10
 8002db8:	f7fd fcae 	bl	8000718 <HAL_Delay>
		au8Temp[CMD] = SET_DIR_PWM;
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <CTL_Main+0x258>)
 8002dbe:	2225      	movs	r2, #37	; 0x25
 8002dc0:	701a      	strb	r2, [r3, #0]
		au8Temp[DIRECTION] = 1 ? 0 : 1;
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <CTL_Main+0x258>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	705a      	strb	r2, [r3, #1]
		unAnyData.u16Data = 0;
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <CTL_Main+0x25c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	801a      	strh	r2, [r3, #0]
		au8Temp[PWM + 0] = unAnyData.au8Data[0];
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <CTL_Main+0x25c>)
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <CTL_Main+0x258>)
 8002dd4:	709a      	strb	r2, [r3, #2]
		au8Temp[PWM + 1] = unAnyData.au8Data[1];
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <CTL_Main+0x25c>)
 8002dd8:	785a      	ldrb	r2, [r3, #1]
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <CTL_Main+0x258>)
 8002ddc:	70da      	strb	r2, [r3, #3]
		SER1_Send_Protocol(au8Temp, 4);
 8002dde:	2104      	movs	r1, #4
 8002de0:	480a      	ldr	r0, [pc, #40]	; (8002e0c <CTL_Main+0x258>)
 8002de2:	f000 f9ef 	bl	80031c4 <SER1_Send_Protocol>
		HAL_UART_Transmit_DMA(&huart1, SER1_au8SndBuf, SER1_TransmitFrameLength);
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <CTL_Main+0x26c>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	490d      	ldr	r1, [pc, #52]	; (8002e24 <CTL_Main+0x270>)
 8002df0:	480d      	ldr	r0, [pc, #52]	; (8002e28 <CTL_Main+0x274>)
 8002df2:	f7ff f9ef 	bl	80021d4 <HAL_UART_Transmit_DMA>
		HAL_Delay(10);
 8002df6:	200a      	movs	r0, #10
 8002df8:	f7fd fc8e 	bl	8000718 <HAL_Delay>
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000005 	.word	0x20000005
 8002e08:	20000318 	.word	0x20000318
 8002e0c:	20000088 	.word	0x20000088
 8002e10:	20000080 	.word	0x20000080
 8002e14:	2000126d 	.word	0x2000126d
 8002e18:	20000d68 	.word	0x20000d68
 8002e1c:	200002d8 	.word	0x200002d8
 8002e20:	2000085d 	.word	0x2000085d
 8002e24:	20000964 	.word	0x20000964
 8002e28:	20000254 	.word	0x20000254
 8002e2c:	20001d84 	.word	0x20001d84

08002e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e34:	f7fd fc0e 	bl	8000654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e38:	f000 f815 	bl	8002e66 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e3c:	f000 f952 	bl	80030e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e40:	f000 f922 	bl	8003088 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002e44:	f000 f8a2 	bl	8002f8c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002e48:	f000 f8ca 	bl	8002fe0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002e4c:	f000 f8f2 	bl	8003034 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8002e50:	f000 f84e 	bl	8002ef0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  UART3_Ini();
 8002e54:	f000 fe7e 	bl	8003b54 <UART3_Ini>
  TIM4_Ini();
 8002e58:	f000 fe60 	bl	8003b1c <TIM4_Ini>
  CTL_Ini();
 8002e5c:	f7ff fe0a 	bl	8002a74 <CTL_Ini>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  CTL_Main();
 8002e60:	f7ff fea8 	bl	8002bb4 <CTL_Main>
 8002e64:	e7fc      	b.n	8002e60 <main+0x30>

08002e66 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b090      	sub	sp, #64	; 0x40
 8002e6a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e6c:	f107 0318 	add.w	r3, r7, #24
 8002e70:	2228      	movs	r2, #40	; 0x28
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fee6 	bl	8003c46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e7a:	1d3b      	adds	r3, r7, #4
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e90:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002e92:	2300      	movs	r3, #0
 8002e94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e96:	2301      	movs	r3, #1
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ea4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eaa:	f107 0318 	add.w	r3, r7, #24
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe f920 	bl	80010f4 <HAL_RCC_OscConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002eba:	f000 f95e 	bl	800317a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ebe:	230f      	movs	r3, #15
 8002ec0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ece:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ed4:	1d3b      	adds	r3, r7, #4
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe fb6f 	bl	80015bc <HAL_RCC_ClockConfig>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002ee4:	f000 f949 	bl	800317a <Error_Handler>
  }
}
 8002ee8:	bf00      	nop
 8002eea:	3740      	adds	r7, #64	; 0x40
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ef6:	f107 0308 	add.w	r3, r7, #8
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f04:	463b      	mov	r3, r7
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <MX_TIM4_Init+0x94>)
 8002f0e:	4a1e      	ldr	r2, [pc, #120]	; (8002f88 <MX_TIM4_Init+0x98>)
 8002f10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8002f12:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <MX_TIM4_Init+0x94>)
 8002f14:	2247      	movs	r2, #71	; 0x47
 8002f16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f18:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <MX_TIM4_Init+0x94>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <MX_TIM4_Init+0x94>)
 8002f20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <MX_TIM4_Init+0x94>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2c:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <MX_TIM4_Init+0x94>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f32:	4814      	ldr	r0, [pc, #80]	; (8002f84 <MX_TIM4_Init+0x94>)
 8002f34:	f7fe fd00 	bl	8001938 <HAL_TIM_Base_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002f3e:	f000 f91c 	bl	800317a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f48:	f107 0308 	add.w	r3, r7, #8
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	480d      	ldr	r0, [pc, #52]	; (8002f84 <MX_TIM4_Init+0x94>)
 8002f50:	f7fe fe3f 	bl	8001bd2 <HAL_TIM_ConfigClockSource>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002f5a:	f000 f90e 	bl	800317a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f66:	463b      	mov	r3, r7
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4806      	ldr	r0, [pc, #24]	; (8002f84 <MX_TIM4_Init+0x94>)
 8002f6c:	f7ff f83b 	bl	8001fe6 <HAL_TIMEx_MasterConfigSynchronization>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002f76:	f000 f900 	bl	800317a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	2000031c 	.word	0x2000031c
 8002f88:	40000800 	.word	0x40000800

08002f8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <MX_USART1_UART_Init+0x4c>)
 8002f92:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <MX_USART1_UART_Init+0x50>)
 8002f94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <MX_USART1_UART_Init+0x4c>)
 8002f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <MX_USART1_UART_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <MX_USART1_UART_Init+0x4c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <MX_USART1_UART_Init+0x4c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <MX_USART1_UART_Init+0x4c>)
 8002fb2:	220c      	movs	r2, #12
 8002fb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <MX_USART1_UART_Init+0x4c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <MX_USART1_UART_Init+0x4c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fc2:	4805      	ldr	r0, [pc, #20]	; (8002fd8 <MX_USART1_UART_Init+0x4c>)
 8002fc4:	f7ff f865 	bl	8002092 <HAL_UART_Init>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fce:	f000 f8d4 	bl	800317a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000254 	.word	0x20000254
 8002fdc:	40013800 	.word	0x40013800

08002fe0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <MX_USART2_UART_Init+0x4c>)
 8002fe6:	4a12      	ldr	r2, [pc, #72]	; (8003030 <MX_USART2_UART_Init+0x50>)
 8002fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <MX_USART2_UART_Init+0x4c>)
 8002fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <MX_USART2_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <MX_USART2_UART_Init+0x4c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <MX_USART2_UART_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003004:	4b09      	ldr	r3, [pc, #36]	; (800302c <MX_USART2_UART_Init+0x4c>)
 8003006:	220c      	movs	r2, #12
 8003008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <MX_USART2_UART_Init+0x4c>)
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <MX_USART2_UART_Init+0x4c>)
 8003012:	2200      	movs	r2, #0
 8003014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003016:	4805      	ldr	r0, [pc, #20]	; (800302c <MX_USART2_UART_Init+0x4c>)
 8003018:	f7ff f83b 	bl	8002092 <HAL_UART_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003022:	f000 f8aa 	bl	800317a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200002d8 	.word	0x200002d8
 8003030:	40004400 	.word	0x40004400

08003034 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <MX_USART3_UART_Init+0x4c>)
 800303a:	4a12      	ldr	r2, [pc, #72]	; (8003084 <MX_USART3_UART_Init+0x50>)
 800303c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <MX_USART3_UART_Init+0x4c>)
 8003040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003044:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <MX_USART3_UART_Init+0x4c>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <MX_USART3_UART_Init+0x4c>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003052:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <MX_USART3_UART_Init+0x4c>)
 8003054:	2200      	movs	r2, #0
 8003056:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <MX_USART3_UART_Init+0x4c>)
 800305a:	220c      	movs	r2, #12
 800305c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <MX_USART3_UART_Init+0x4c>)
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <MX_USART3_UART_Init+0x4c>)
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800306a:	4805      	ldr	r0, [pc, #20]	; (8003080 <MX_USART3_UART_Init+0x4c>)
 800306c:	f7ff f811 	bl	8002092 <HAL_UART_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003076:	f000 f880 	bl	800317a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000040 	.word	0x20000040
 8003084:	40004800 	.word	0x40004800

08003088 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <MX_DMA_Init+0x58>)
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	4a13      	ldr	r2, [pc, #76]	; (80030e0 <MX_DMA_Init+0x58>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6153      	str	r3, [r2, #20]
 800309a:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <MX_DMA_Init+0x58>)
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	607b      	str	r3, [r7, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80030a6:	2200      	movs	r2, #0
 80030a8:	2100      	movs	r1, #0
 80030aa:	200c      	movs	r0, #12
 80030ac:	f7fd fc29 	bl	8000902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80030b0:	200c      	movs	r0, #12
 80030b2:	f7fd fc42 	bl	800093a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2100      	movs	r1, #0
 80030ba:	200e      	movs	r0, #14
 80030bc:	f7fd fc21 	bl	8000902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80030c0:	200e      	movs	r0, #14
 80030c2:	f7fd fc3a 	bl	800093a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2100      	movs	r1, #0
 80030ca:	2011      	movs	r0, #17
 80030cc:	f7fd fc19 	bl	8000902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80030d0:	2011      	movs	r0, #17
 80030d2:	f7fd fc32 	bl	800093a <HAL_NVIC_EnableIRQ>

}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000

080030e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ea:	4b14      	ldr	r3, [pc, #80]	; (800313c <MX_GPIO_Init+0x58>)
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	4a13      	ldr	r2, [pc, #76]	; (800313c <MX_GPIO_Init+0x58>)
 80030f0:	f043 0320 	orr.w	r3, r3, #32
 80030f4:	6193      	str	r3, [r2, #24]
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <MX_GPIO_Init+0x58>)
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	4b0e      	ldr	r3, [pc, #56]	; (800313c <MX_GPIO_Init+0x58>)
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	4a0d      	ldr	r2, [pc, #52]	; (800313c <MX_GPIO_Init+0x58>)
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	6193      	str	r3, [r2, #24]
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <MX_GPIO_Init+0x58>)
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <MX_GPIO_Init+0x58>)
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	4a07      	ldr	r2, [pc, #28]	; (800313c <MX_GPIO_Init+0x58>)
 8003120:	f043 0308 	orr.w	r3, r3, #8
 8003124:	6193      	str	r3, [r2, #24]
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <MX_GPIO_Init+0x58>)
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]

}
 8003132:	bf00      	nop
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	40021000 	.word	0x40021000

08003140 <HAL_UART_RxCpltCallback>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a04      	ldr	r2, [pc, #16]	; (8003160 <HAL_UART_RxCpltCallback+0x20>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d102      	bne.n	8003158 <HAL_UART_RxCpltCallback+0x18>
	{
		UART3_HAL_UART_RxCpltCallback(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fd0c 	bl	8003b70 <UART3_HAL_UART_RxCpltCallback>
	}


}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40004800 	.word	0x40004800

08003164 <HAL_TIM_PeriodElapsedCallback>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	TIM4_HAL_TIM_PeriodElapsedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fce1 	bl	8003b34 <TIM4_HAL_TIM_PeriodElapsedCallback>

}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <ser1_XORChecksum>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 ser1_XORChecksum(TUINT8* pu8Data, TUINT8 u8Len)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	70fb      	strb	r3, [r7, #3]
  TUINT8 u8XOR = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]
  for(int i = 0; i < u8Len; i++) u8XOR ^= pu8Data[i];
 8003196:	2300      	movs	r3, #0
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	e009      	b.n	80031b0 <ser1_XORChecksum+0x2a>
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	781a      	ldrb	r2, [r3, #0]
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	4053      	eors	r3, r2
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	3301      	adds	r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	dbf1      	blt.n	800319c <ser1_XORChecksum+0x16>
  return u8XOR;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <SER1_Send_Protocol>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void SER1_Send_Protocol (TUINT8* pu8Data, TUINT8 u8Len)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]
  // STX, DLC, DATA
  SER1_au8SndBuf[0] = SER1_STX;
 80031d0:	4b13      	ldr	r3, [pc, #76]	; (8003220 <SER1_Send_Protocol+0x5c>)
 80031d2:	2265      	movs	r2, #101	; 0x65
 80031d4:	701a      	strb	r2, [r3, #0]
  SER1_au8SndBuf[1] = u8Len;
 80031d6:	4a12      	ldr	r2, [pc, #72]	; (8003220 <SER1_Send_Protocol+0x5c>)
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	7053      	strb	r3, [r2, #1]
  memcpy((char*)&SER1_au8SndBuf[2], (char*)pu8Data, u8Len);
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	461a      	mov	r2, r3
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4810      	ldr	r0, [pc, #64]	; (8003224 <SER1_Send_Protocol+0x60>)
 80031e4:	f000 fd24 	bl	8003c30 <memcpy>

#ifdef XOR_CHECKSUM
  TUINT8 u8Chk;
  u8Chk = ser1_XORChecksum(SER1_au8SndBuf, u8Len + 2);
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	3302      	adds	r3, #2
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	4619      	mov	r1, r3
 80031f0:	480b      	ldr	r0, [pc, #44]	; (8003220 <SER1_Send_Protocol+0x5c>)
 80031f2:	f7ff ffc8 	bl	8003186 <ser1_XORChecksum>
 80031f6:	4603      	mov	r3, r0
 80031f8:	73fb      	strb	r3, [r7, #15]
  ser1_Start_Sending();
#endif


#ifdef SER1_SENDING_MODE_DMA
  SER1_au8SndBuf[u8Len + 2] = u8Chk;
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	3302      	adds	r3, #2
 80031fe:	4908      	ldr	r1, [pc, #32]	; (8003220 <SER1_Send_Protocol+0x5c>)
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	54ca      	strb	r2, [r1, r3]
  SER1_au8SndBuf[u8Len + 3] = SER1_ETX;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	3303      	adds	r3, #3
 8003208:	4a05      	ldr	r2, [pc, #20]	; (8003220 <SER1_Send_Protocol+0x5c>)
 800320a:	210d      	movs	r1, #13
 800320c:	54d1      	strb	r1, [r2, r3]

  SER1_TransmitFrameLength = u8Len + 4;
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	3304      	adds	r3, #4
 8003212:	b2da      	uxtb	r2, r3
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <SER1_Send_Protocol+0x64>)
 8003216:	701a      	strb	r2, [r3, #0]
#endif
}
 8003218:	bf00      	nop
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20000964 	.word	0x20000964
 8003224:	20000966 	.word	0x20000966
 8003228:	2000085d 	.word	0x2000085d

0800322c <ser2_XORChecksum>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 ser2_XORChecksum(TUINT8* pu8Data, TUINT8 u8Len)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
  TUINT8 u8XOR = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	73fb      	strb	r3, [r7, #15]
  for(int i = 0; i < u8Len; i++) u8XOR ^= pu8Data[i];
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	e009      	b.n	8003256 <ser2_XORChecksum+0x2a>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	4413      	add	r3, r2
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	4053      	eors	r3, r2
 800324e:	73fb      	strb	r3, [r7, #15]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	3301      	adds	r3, #1
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	429a      	cmp	r2, r3
 800325c:	dbf1      	blt.n	8003242 <ser2_XORChecksum+0x16>
  return u8XOR;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
	...

0800326c <SER2_Send_Protocol>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void SER2_Send_Protocol (TUINT8* pu8Data, TUINT8 u8Len)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	70fb      	strb	r3, [r7, #3]
  // STX, DLC, DATA
  SER2_au8SndBuf[0] = SER2_STX;
 8003278:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <SER2_Send_Protocol+0x5c>)
 800327a:	2265      	movs	r2, #101	; 0x65
 800327c:	701a      	strb	r2, [r3, #0]
  SER2_au8SndBuf[1] = u8Len;
 800327e:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <SER2_Send_Protocol+0x5c>)
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	7053      	strb	r3, [r2, #1]
  memcpy((char*)&SER2_au8SndBuf[2], (char*)pu8Data, u8Len);
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	461a      	mov	r2, r3
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4810      	ldr	r0, [pc, #64]	; (80032cc <SER2_Send_Protocol+0x60>)
 800328c:	f000 fcd0 	bl	8003c30 <memcpy>

#ifdef XOR_CHECKSUM
  TUINT8 u8Chk;
  u8Chk = ser2_XORChecksum(SER2_au8SndBuf, u8Len + 2);
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	3302      	adds	r3, #2
 8003294:	b2db      	uxtb	r3, r3
 8003296:	4619      	mov	r1, r3
 8003298:	480b      	ldr	r0, [pc, #44]	; (80032c8 <SER2_Send_Protocol+0x5c>)
 800329a:	f7ff ffc7 	bl	800322c <ser2_XORChecksum>
 800329e:	4603      	mov	r3, r0
 80032a0:	73fb      	strb	r3, [r7, #15]
  ser2_Start_Sending();
#endif


#ifdef SER2_SENDING_MODE_DMA
  SER2_au8SndBuf[u8Len + 2] = u8Chk;
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	3302      	adds	r3, #2
 80032a6:	4908      	ldr	r1, [pc, #32]	; (80032c8 <SER2_Send_Protocol+0x5c>)
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	54ca      	strb	r2, [r1, r3]
  SER2_au8SndBuf[u8Len + 3] = SER2_ETX;
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	3303      	adds	r3, #3
 80032b0:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <SER2_Send_Protocol+0x5c>)
 80032b2:	210d      	movs	r1, #13
 80032b4:	54d1      	strb	r1, [r2, r3]

  SER2_TransmitFrameLength = u8Len + 4;
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	3304      	adds	r3, #4
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <SER2_Send_Protocol+0x64>)
 80032be:	701a      	strb	r2, [r3, #0]
#endif
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000d68 	.word	0x20000d68
 80032cc:	20000d6a 	.word	0x20000d6a
 80032d0:	2000126d 	.word	0x2000126d

080032d4 <SER3_Protocol_Handling>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void SER3_Protocol_Handling(TUINT8 u8Cycles)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
  static TUINT8 u8Counter;
  static TUINT8 u8Chk;
  static TUINT8 u8i;
  int i;

  for (i = 0; i < u8Cycles; i++)
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	e0b5      	b.n	8003450 <SER3_Protocol_Handling+0x17c>
  {
    if ((!SER3_u8RecBuf_Empty()) && (!ser3_u8Valid_Data))
 80032e4:	f000 f928 	bl	8003538 <SER3_u8RecBuf_Empty>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 80a8 	bne.w	8003440 <SER3_Protocol_Handling+0x16c>
 80032f0:	4b5c      	ldr	r3, [pc, #368]	; (8003464 <SER3_Protocol_Handling+0x190>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f040 80a3 	bne.w	8003440 <SER3_Protocol_Handling+0x16c>
    {
      switch (ser3_Operation)
 80032fa:	4b5b      	ldr	r3, [pc, #364]	; (8003468 <SER3_Protocol_Handling+0x194>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b04      	cmp	r3, #4
 8003300:	f200 80a0 	bhi.w	8003444 <SER3_Protocol_Handling+0x170>
 8003304:	a201      	add	r2, pc, #4	; (adr r2, 800330c <SER3_Protocol_Handling+0x38>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	08003321 	.word	0x08003321
 8003310:	0800333f 	.word	0x0800333f
 8003314:	08003359 	.word	0x08003359
 8003318:	0800338d 	.word	0x0800338d
 800331c:	0800340f 	.word	0x0800340f
      {
        case PROOF_STX:
        {
          u8Temp = SER3_u8RecBuf_Get();
 8003320:	f000 f8ea 	bl	80034f8 <SER3_u8RecBuf_Get>
 8003324:	4603      	mov	r3, r0
 8003326:	461a      	mov	r2, r3
 8003328:	4b50      	ldr	r3, [pc, #320]	; (800346c <SER3_Protocol_Handling+0x198>)
 800332a:	701a      	strb	r2, [r3, #0]

          if (u8Temp == SER3_STX) // Ist das Startzeichen korrekt?
 800332c:	4b4f      	ldr	r3, [pc, #316]	; (800346c <SER3_Protocol_Handling+0x198>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b65      	cmp	r3, #101	; 0x65
 8003332:	f040 8089 	bne.w	8003448 <SER3_Protocol_Handling+0x174>
          {
            ser3_Operation = STORE_DLC;
 8003336:	4b4c      	ldr	r3, [pc, #304]	; (8003468 <SER3_Protocol_Handling+0x194>)
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
          }

          break;
 800333c:	e084      	b.n	8003448 <SER3_Protocol_Handling+0x174>
        }

        case STORE_DLC:
        {
          u8DLC = SER3_u8RecBuf_Get(); // DLC speichern
 800333e:	f000 f8db 	bl	80034f8 <SER3_u8RecBuf_Get>
 8003342:	4603      	mov	r3, r0
 8003344:	461a      	mov	r2, r3
 8003346:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <SER3_Protocol_Handling+0x19c>)
 8003348:	701a      	strb	r2, [r3, #0]
          u8Counter = 0; // Wichtig, nicht vergessen, hat schon oft Sorgen bereitet
 800334a:	4b4a      	ldr	r3, [pc, #296]	; (8003474 <SER3_Protocol_Handling+0x1a0>)
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
          ser3_Operation = STORE_DATA;
 8003350:	4b45      	ldr	r3, [pc, #276]	; (8003468 <SER3_Protocol_Handling+0x194>)
 8003352:	2202      	movs	r2, #2
 8003354:	701a      	strb	r2, [r3, #0]

          break;
 8003356:	e078      	b.n	800344a <SER3_Protocol_Handling+0x176>
        }

        case STORE_DATA: // Daten speichern
        {
          if (u8Counter < u8DLC)
 8003358:	4b46      	ldr	r3, [pc, #280]	; (8003474 <SER3_Protocol_Handling+0x1a0>)
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	4b44      	ldr	r3, [pc, #272]	; (8003470 <SER3_Protocol_Handling+0x19c>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d20f      	bcs.n	8003384 <SER3_Protocol_Handling+0xb0>
          {
            SER3_au8RecBuf[u8Counter] = SER3_u8RecBuf_Get();
 8003364:	4b43      	ldr	r3, [pc, #268]	; (8003474 <SER3_Protocol_Handling+0x1a0>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461c      	mov	r4, r3
 800336a:	f000 f8c5 	bl	80034f8 <SER3_u8RecBuf_Get>
 800336e:	4603      	mov	r3, r0
 8003370:	461a      	mov	r2, r3
 8003372:	4b41      	ldr	r3, [pc, #260]	; (8003478 <SER3_Protocol_Handling+0x1a4>)
 8003374:	551a      	strb	r2, [r3, r4]
            u8Counter++;
 8003376:	4b3f      	ldr	r3, [pc, #252]	; (8003474 <SER3_Protocol_Handling+0x1a0>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	3301      	adds	r3, #1
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4b3d      	ldr	r3, [pc, #244]	; (8003474 <SER3_Protocol_Handling+0x1a0>)
 8003380:	701a      	strb	r2, [r3, #0]
          else
          {
      	    ser3_Operation = PROOF_CHK;
          }

          break;
 8003382:	e062      	b.n	800344a <SER3_Protocol_Handling+0x176>
      	    ser3_Operation = PROOF_CHK;
 8003384:	4b38      	ldr	r3, [pc, #224]	; (8003468 <SER3_Protocol_Handling+0x194>)
 8003386:	2203      	movs	r2, #3
 8003388:	701a      	strb	r2, [r3, #0]
          break;
 800338a:	e05e      	b.n	800344a <SER3_Protocol_Handling+0x176>
        }

        case PROOF_CHK: // Checksumme berechnen und mit Checksumme von Protokoll vergleichen
        {
          u8Chk = 0;
 800338c:	4b3b      	ldr	r3, [pc, #236]	; (800347c <SER3_Protocol_Handling+0x1a8>)
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]

          u8Chk ^= SER3_STX;
 8003392:	4b3a      	ldr	r3, [pc, #232]	; (800347c <SER3_Protocol_Handling+0x1a8>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	f083 0365 	eor.w	r3, r3, #101	; 0x65
 800339a:	b2da      	uxtb	r2, r3
 800339c:	4b37      	ldr	r3, [pc, #220]	; (800347c <SER3_Protocol_Handling+0x1a8>)
 800339e:	701a      	strb	r2, [r3, #0]
          u8Chk ^= u8DLC;
 80033a0:	4b36      	ldr	r3, [pc, #216]	; (800347c <SER3_Protocol_Handling+0x1a8>)
 80033a2:	781a      	ldrb	r2, [r3, #0]
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <SER3_Protocol_Handling+0x19c>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	4053      	eors	r3, r2
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	4b33      	ldr	r3, [pc, #204]	; (800347c <SER3_Protocol_Handling+0x1a8>)
 80033ae:	701a      	strb	r2, [r3, #0]

          for (u8i = 0; u8i < u8DLC; u8i++)
 80033b0:	4b33      	ldr	r3, [pc, #204]	; (8003480 <SER3_Protocol_Handling+0x1ac>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e010      	b.n	80033da <SER3_Protocol_Handling+0x106>
          {
            u8Chk ^=  SER3_au8RecBuf[u8i];
 80033b8:	4b31      	ldr	r3, [pc, #196]	; (8003480 <SER3_Protocol_Handling+0x1ac>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	4b2e      	ldr	r3, [pc, #184]	; (8003478 <SER3_Protocol_Handling+0x1a4>)
 80033c0:	5c9a      	ldrb	r2, [r3, r2]
 80033c2:	4b2e      	ldr	r3, [pc, #184]	; (800347c <SER3_Protocol_Handling+0x1a8>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	4053      	eors	r3, r2
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4b2c      	ldr	r3, [pc, #176]	; (800347c <SER3_Protocol_Handling+0x1a8>)
 80033cc:	701a      	strb	r2, [r3, #0]
          for (u8i = 0; u8i < u8DLC; u8i++)
 80033ce:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <SER3_Protocol_Handling+0x1ac>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <SER3_Protocol_Handling+0x1ac>)
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	4b29      	ldr	r3, [pc, #164]	; (8003480 <SER3_Protocol_Handling+0x1ac>)
 80033dc:	781a      	ldrb	r2, [r3, #0]
 80033de:	4b24      	ldr	r3, [pc, #144]	; (8003470 <SER3_Protocol_Handling+0x19c>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d3e8      	bcc.n	80033b8 <SER3_Protocol_Handling+0xe4>
          }

          u8Temp = SER3_u8RecBuf_Get(); // Hole die Checksumme
 80033e6:	f000 f887 	bl	80034f8 <SER3_u8RecBuf_Get>
 80033ea:	4603      	mov	r3, r0
 80033ec:	461a      	mov	r2, r3
 80033ee:	4b1f      	ldr	r3, [pc, #124]	; (800346c <SER3_Protocol_Handling+0x198>)
 80033f0:	701a      	strb	r2, [r3, #0]

          if (u8Temp == u8Chk) // �berpr�fe die Checksumme
 80033f2:	4b1e      	ldr	r3, [pc, #120]	; (800346c <SER3_Protocol_Handling+0x198>)
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	4b21      	ldr	r3, [pc, #132]	; (800347c <SER3_Protocol_Handling+0x1a8>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d103      	bne.n	8003406 <SER3_Protocol_Handling+0x132>
          {
            ser3_Operation = PROOF_ETX;
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <SER3_Protocol_Handling+0x194>)
 8003400:	2204      	movs	r2, #4
 8003402:	701a      	strb	r2, [r3, #0]
          else
          {
            ser3_Operation = PROOF_STX; // Versuch verwerfen
          }

          break;
 8003404:	e021      	b.n	800344a <SER3_Protocol_Handling+0x176>
            ser3_Operation = PROOF_STX; // Versuch verwerfen
 8003406:	4b18      	ldr	r3, [pc, #96]	; (8003468 <SER3_Protocol_Handling+0x194>)
 8003408:	2200      	movs	r2, #0
 800340a:	701a      	strb	r2, [r3, #0]
          break;
 800340c:	e01d      	b.n	800344a <SER3_Protocol_Handling+0x176>
        }

        case PROOF_ETX:
        {
          u8Temp = SER3_u8RecBuf_Get();
 800340e:	f000 f873 	bl	80034f8 <SER3_u8RecBuf_Get>
 8003412:	4603      	mov	r3, r0
 8003414:	461a      	mov	r2, r3
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <SER3_Protocol_Handling+0x198>)
 8003418:	701a      	strb	r2, [r3, #0]

         if (u8Temp == SER3_ETX) // Ist das Ende Zeichen korrekt?
 800341a:	4b14      	ldr	r3, [pc, #80]	; (800346c <SER3_Protocol_Handling+0x198>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b0d      	cmp	r3, #13
 8003420:	d10a      	bne.n	8003438 <SER3_Protocol_Handling+0x164>
          {
            ser3_u8Valid_Data = 1; // Jetzt sind die Daten g�ltig ansonsten nicht
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <SER3_Protocol_Handling+0x190>)
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
            SER3_u8ReceivedPayloadLength = u8DLC; // DLC einer globalen Variable �bergeben
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <SER3_Protocol_Handling+0x19c>)
 800342a:	781a      	ldrb	r2, [r3, #0]
 800342c:	4b15      	ldr	r3, [pc, #84]	; (8003484 <SER3_Protocol_Handling+0x1b0>)
 800342e:	701a      	strb	r2, [r3, #0]
            ser3_Operation = PROOF_STX; // Von vorne anfangen
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <SER3_Protocol_Handling+0x194>)
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
          else
          {
            ser3_Operation = PROOF_STX; // Von vorne anfangen
          }

          break;
 8003436:	e008      	b.n	800344a <SER3_Protocol_Handling+0x176>
            ser3_Operation = PROOF_STX; // Von vorne anfangen
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <SER3_Protocol_Handling+0x194>)
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
          break;
 800343e:	e004      	b.n	800344a <SER3_Protocol_Handling+0x176>
        }

        default: break;
      }
    }
 8003440:	bf00      	nop
 8003442:	e002      	b.n	800344a <SER3_Protocol_Handling+0x176>
        default: break;
 8003444:	bf00      	nop
 8003446:	e000      	b.n	800344a <SER3_Protocol_Handling+0x176>
          break;
 8003448:	bf00      	nop
  for (i = 0; i < u8Cycles; i++)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3301      	adds	r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	429a      	cmp	r2, r3
 8003456:	f6ff af45 	blt.w	80032e4 <SER3_Protocol_Handling+0x10>
  }
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bd90      	pop	{r4, r7, pc}
 8003462:	bf00      	nop
 8003464:	20001774 	.word	0x20001774
 8003468:	2000002c 	.word	0x2000002c
 800346c:	20000032 	.word	0x20000032
 8003470:	20000033 	.word	0x20000033
 8003474:	20000034 	.word	0x20000034
 8003478:	20001d84 	.word	0x20001d84
 800347c:	20000035 	.word	0x20000035
 8003480:	20000036 	.word	0x20000036
 8003484:	20002184 	.word	0x20002184

08003488 <SER3_u8Valid_Data>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 SER3_u8Valid_Data(void)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
  TUINT8 u8Ret_Val;

  if (ser3_u8Valid_Data)
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <SER3_u8Valid_Data+0x2c>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <SER3_u8Valid_Data+0x1a>
  {
    ser3_u8Valid_Data = 0;
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <SER3_u8Valid_Data+0x2c>)
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
    u8Ret_Val = 1;
 800349c:	2301      	movs	r3, #1
 800349e:	71fb      	strb	r3, [r7, #7]
 80034a0:	e001      	b.n	80034a6 <SER3_u8Valid_Data+0x1e>
  }
  else
  {
	u8Ret_Val = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	71fb      	strb	r3, [r7, #7]
  }

  return u8Ret_Val;
 80034a6:	79fb      	ldrb	r3, [r7, #7]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20001774 	.word	0x20001774

080034b8 <SER3_RecBuf_Put>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void SER3_RecBuf_Put (TUINT8 u8Data)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	71fb      	strb	r3, [r7, #7]
  ser3_au8RecBuf[ser3_u16RecBuf_Tail++] = u8Data;
 80034c2:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <SER3_RecBuf_Put+0x38>)
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	b291      	uxth	r1, r2
 80034ca:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <SER3_RecBuf_Put+0x38>)
 80034cc:	8011      	strh	r1, [r2, #0]
 80034ce:	4619      	mov	r1, r3
 80034d0:	4a08      	ldr	r2, [pc, #32]	; (80034f4 <SER3_RecBuf_Put+0x3c>)
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	5453      	strb	r3, [r2, r1]
  if (ser3_u16RecBuf_Tail > SER3_RECBUF_QUELEN) ser3_u16RecBuf_Tail = 0;
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <SER3_RecBuf_Put+0x38>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034de:	d902      	bls.n	80034e6 <SER3_RecBuf_Put+0x2e>
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <SER3_RecBuf_Put+0x38>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	801a      	strh	r2, [r3, #0]
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr
 80034f0:	20000030 	.word	0x20000030
 80034f4:	20001778 	.word	0x20001778

080034f8 <SER3_u8RecBuf_Get>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 SER3_u8RecBuf_Get (void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
  TUINT8 u8Data = ser3_au8RecBuf[ser3_u16RecBuf_Head++];
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <SER3_u8RecBuf_Get+0x38>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	b291      	uxth	r1, r2
 8003506:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <SER3_u8RecBuf_Get+0x38>)
 8003508:	8011      	strh	r1, [r2, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <SER3_u8RecBuf_Get+0x3c>)
 800350e:	5c9b      	ldrb	r3, [r3, r2]
 8003510:	71fb      	strb	r3, [r7, #7]
  if (ser3_u16RecBuf_Head > SER3_RECBUF_QUELEN) ser3_u16RecBuf_Head = 0;
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <SER3_u8RecBuf_Get+0x38>)
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351a:	d902      	bls.n	8003522 <SER3_u8RecBuf_Get+0x2a>
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <SER3_u8RecBuf_Get+0x38>)
 800351e:	2200      	movs	r2, #0
 8003520:	801a      	strh	r2, [r3, #0]
  return u8Data;
 8003522:	79fb      	ldrb	r3, [r7, #7]
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	2000002e 	.word	0x2000002e
 8003534:	20001778 	.word	0x20001778

08003538 <SER3_u8RecBuf_Empty>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

TUINT8 SER3_u8RecBuf_Empty (void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return ser3_u16RecBuf_Head == ser3_u16RecBuf_Tail;
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <SER3_u8RecBuf_Empty+0x20>)
 800353e:	881a      	ldrh	r2, [r3, #0]
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <SER3_u8RecBuf_Empty+0x24>)
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
}
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	2000002e 	.word	0x2000002e
 800355c:	20000030 	.word	0x20000030

08003560 <STE1_Calculation>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

tystSteering STE1_Calculation (TUINT16 u16Thro, TUINT16 u16Elev)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	807b      	strh	r3, [r7, #2]
 800356c:	4613      	mov	r3, r2
 800356e:	803b      	strh	r3, [r7, #0]
  // Calculate curves
  //
  ///////////////////////////////////////////////////////////////////////////////

  int Throttle;
  Throttle = (int) ((float)0.954654 * (float)u16Thro - (float)1430.07);
 8003570:	887b      	ldrh	r3, [r7, #2]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fc fea0 	bl	80002b8 <__aeabi_ui2f>
 8003578:	4603      	mov	r3, r0
 800357a:	493c      	ldr	r1, [pc, #240]	; (800366c <STE1_Calculation+0x10c>)
 800357c:	4618      	mov	r0, r3
 800357e:	f7fc fef3 	bl	8000368 <__aeabi_fmul>
 8003582:	4603      	mov	r3, r0
 8003584:	493a      	ldr	r1, [pc, #232]	; (8003670 <STE1_Calculation+0x110>)
 8003586:	4618      	mov	r0, r3
 8003588:	f7fc fde4 	bl	8000154 <__aeabi_fsub>
 800358c:	4603      	mov	r3, r0
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd f83a 	bl	8000608 <__aeabi_f2iz>
 8003594:	4603      	mov	r3, r0
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
  if (Throttle > 400) Throttle = 400;
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800359e:	dd02      	ble.n	80035a6 <STE1_Calculation+0x46>
 80035a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (Throttle < -400) Throttle = -400;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 80035ac:	da01      	bge.n	80035b2 <STE1_Calculation+0x52>
 80035ae:	4b31      	ldr	r3, [pc, #196]	; (8003674 <STE1_Calculation+0x114>)
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24

  int Elevator;
  Elevator = (int) ((float)0.954654 * (float)u16Elev - (float)1430.07);
 80035b2:	883b      	ldrh	r3, [r7, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fc fe7f 	bl	80002b8 <__aeabi_ui2f>
 80035ba:	4603      	mov	r3, r0
 80035bc:	492b      	ldr	r1, [pc, #172]	; (800366c <STE1_Calculation+0x10c>)
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fc fed2 	bl	8000368 <__aeabi_fmul>
 80035c4:	4603      	mov	r3, r0
 80035c6:	492a      	ldr	r1, [pc, #168]	; (8003670 <STE1_Calculation+0x110>)
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fc fdc3 	bl	8000154 <__aeabi_fsub>
 80035ce:	4603      	mov	r3, r0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd f819 	bl	8000608 <__aeabi_f2iz>
 80035d6:	4603      	mov	r3, r0
 80035d8:	623b      	str	r3, [r7, #32]
  if (Elevator > 400) Elevator = 400;
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80035e0:	dd02      	ble.n	80035e8 <STE1_Calculation+0x88>
 80035e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80035e6:	623b      	str	r3, [r7, #32]
  if (Elevator < -400) Elevator = -400;
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 80035ee:	da01      	bge.n	80035f4 <STE1_Calculation+0x94>
 80035f0:	4b20      	ldr	r3, [pc, #128]	; (8003674 <STE1_Calculation+0x114>)
 80035f2:	623b      	str	r3, [r7, #32]
  //SER2_Send_String(au8Temp, strlen(au8Temp));


  int Left_Track_Speed, Left_Track_Dir, Right_Track_Speed, Right_Track_Dir;

  if (Throttle >= 0)
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	db07      	blt.n	800360a <STE1_Calculation+0xaa>
  {
	Left_Track_Speed = abs(Throttle);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bfb8      	it	lt
 8003600:	425b      	neglt	r3, r3
 8003602:	61fb      	str	r3, [r7, #28]
	Left_Track_Dir = 1;
 8003604:	2301      	movs	r3, #1
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	e006      	b.n	8003618 <STE1_Calculation+0xb8>
  }
  else
  {
	Left_Track_Speed = abs(Throttle);
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	2b00      	cmp	r3, #0
 800360e:	bfb8      	it	lt
 8003610:	425b      	neglt	r3, r3
 8003612:	61fb      	str	r3, [r7, #28]
	Left_Track_Dir = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	61bb      	str	r3, [r7, #24]
  }

  if (Elevator >= 0)
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	2b00      	cmp	r3, #0
 800361c:	db07      	blt.n	800362e <STE1_Calculation+0xce>
  {
	Right_Track_Speed = abs(Elevator);
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	2b00      	cmp	r3, #0
 8003622:	bfb8      	it	lt
 8003624:	425b      	neglt	r3, r3
 8003626:	617b      	str	r3, [r7, #20]
	Right_Track_Dir = 1;
 8003628:	2301      	movs	r3, #1
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	e006      	b.n	800363c <STE1_Calculation+0xdc>
  }
  else
  {
	Right_Track_Speed = abs(Elevator);
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	2b00      	cmp	r3, #0
 8003632:	bfb8      	it	lt
 8003634:	425b      	neglt	r3, r3
 8003636:	617b      	str	r3, [r7, #20]
	Right_Track_Dir = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]

  tystSteering stSteering;



  stSteering.u8Motor_Left_Dir = Left_Track_Dir;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	72bb      	strb	r3, [r7, #10]
  stSteering.u16Motor_Left_Speed = Left_Track_Speed;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	b29b      	uxth	r3, r3
 8003646:	813b      	strh	r3, [r7, #8]
  stSteering.u8Motor_Right_Dir = Right_Track_Dir;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	73bb      	strb	r3, [r7, #14]
  stSteering.u16Motor_Right_Speed = Right_Track_Speed;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	b29b      	uxth	r3, r3
 8003652:	81bb      	strh	r3, [r7, #12]





  return stSteering;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	461a      	mov	r2, r3
 8003658:	f107 0308 	add.w	r3, r7, #8
 800365c:	cb03      	ldmia	r3!, {r0, r1}
 800365e:	6010      	str	r0, [r2, #0]
 8003660:	6051      	str	r1, [r2, #4]

}
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	3728      	adds	r7, #40	; 0x28
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	3f746434 	.word	0x3f746434
 8003670:	44b2c23d 	.word	0x44b2c23d
 8003674:	fffffe70 	.word	0xfffffe70

08003678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <HAL_MspInit+0x5c>)
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	4a14      	ldr	r2, [pc, #80]	; (80036d4 <HAL_MspInit+0x5c>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6193      	str	r3, [r2, #24]
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_MspInit+0x5c>)
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <HAL_MspInit+0x5c>)
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	4a0e      	ldr	r2, [pc, #56]	; (80036d4 <HAL_MspInit+0x5c>)
 800369c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a0:	61d3      	str	r3, [r2, #28]
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_MspInit+0x5c>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036aa:	607b      	str	r3, [r7, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <HAL_MspInit+0x60>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <HAL_MspInit+0x60>)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40010000 	.word	0x40010000

080036dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <HAL_TIM_Base_MspInit+0x44>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d113      	bne.n	8003716 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036ee:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <HAL_TIM_Base_MspInit+0x48>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4a0c      	ldr	r2, [pc, #48]	; (8003724 <HAL_TIM_Base_MspInit+0x48>)
 80036f4:	f043 0304 	orr.w	r3, r3, #4
 80036f8:	61d3      	str	r3, [r2, #28]
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <HAL_TIM_Base_MspInit+0x48>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003706:	2200      	movs	r2, #0
 8003708:	2100      	movs	r1, #0
 800370a:	201e      	movs	r0, #30
 800370c:	f7fd f8f9 	bl	8000902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003710:	201e      	movs	r0, #30
 8003712:	f7fd f912 	bl	800093a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40000800 	.word	0x40000800
 8003724:	40021000 	.word	0x40021000

08003728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08c      	sub	sp, #48	; 0x30
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 0320 	add.w	r3, r7, #32
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a98      	ldr	r2, [pc, #608]	; (80039a4 <HAL_UART_MspInit+0x27c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d160      	bne.n	800380a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003748:	4b97      	ldr	r3, [pc, #604]	; (80039a8 <HAL_UART_MspInit+0x280>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	4a96      	ldr	r2, [pc, #600]	; (80039a8 <HAL_UART_MspInit+0x280>)
 800374e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003752:	6193      	str	r3, [r2, #24]
 8003754:	4b94      	ldr	r3, [pc, #592]	; (80039a8 <HAL_UART_MspInit+0x280>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003760:	4b91      	ldr	r3, [pc, #580]	; (80039a8 <HAL_UART_MspInit+0x280>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	4a90      	ldr	r2, [pc, #576]	; (80039a8 <HAL_UART_MspInit+0x280>)
 8003766:	f043 0304 	orr.w	r3, r3, #4
 800376a:	6193      	str	r3, [r2, #24]
 800376c:	4b8e      	ldr	r3, [pc, #568]	; (80039a8 <HAL_UART_MspInit+0x280>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800377c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	2302      	movs	r3, #2
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003782:	2303      	movs	r3, #3
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003786:	f107 0320 	add.w	r3, r7, #32
 800378a:	4619      	mov	r1, r3
 800378c:	4887      	ldr	r0, [pc, #540]	; (80039ac <HAL_UART_MspInit+0x284>)
 800378e:	f7fd fb53 	bl	8000e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003798:	2300      	movs	r3, #0
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a0:	f107 0320 	add.w	r3, r7, #32
 80037a4:	4619      	mov	r1, r3
 80037a6:	4881      	ldr	r0, [pc, #516]	; (80039ac <HAL_UART_MspInit+0x284>)
 80037a8:	f7fd fb46 	bl	8000e38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80037ac:	4b80      	ldr	r3, [pc, #512]	; (80039b0 <HAL_UART_MspInit+0x288>)
 80037ae:	4a81      	ldr	r2, [pc, #516]	; (80039b4 <HAL_UART_MspInit+0x28c>)
 80037b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037b2:	4b7f      	ldr	r3, [pc, #508]	; (80039b0 <HAL_UART_MspInit+0x288>)
 80037b4:	2210      	movs	r2, #16
 80037b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037b8:	4b7d      	ldr	r3, [pc, #500]	; (80039b0 <HAL_UART_MspInit+0x288>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037be:	4b7c      	ldr	r3, [pc, #496]	; (80039b0 <HAL_UART_MspInit+0x288>)
 80037c0:	2280      	movs	r2, #128	; 0x80
 80037c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037c4:	4b7a      	ldr	r3, [pc, #488]	; (80039b0 <HAL_UART_MspInit+0x288>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037ca:	4b79      	ldr	r3, [pc, #484]	; (80039b0 <HAL_UART_MspInit+0x288>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80037d0:	4b77      	ldr	r3, [pc, #476]	; (80039b0 <HAL_UART_MspInit+0x288>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037d6:	4b76      	ldr	r3, [pc, #472]	; (80039b0 <HAL_UART_MspInit+0x288>)
 80037d8:	2200      	movs	r2, #0
 80037da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80037dc:	4874      	ldr	r0, [pc, #464]	; (80039b0 <HAL_UART_MspInit+0x288>)
 80037de:	f7fd f8c7 	bl	8000970 <HAL_DMA_Init>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80037e8:	f7ff fcc7 	bl	800317a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a70      	ldr	r2, [pc, #448]	; (80039b0 <HAL_UART_MspInit+0x288>)
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
 80037f2:	4a6f      	ldr	r2, [pc, #444]	; (80039b0 <HAL_UART_MspInit+0x288>)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80037f8:	2200      	movs	r2, #0
 80037fa:	2100      	movs	r1, #0
 80037fc:	2025      	movs	r0, #37	; 0x25
 80037fe:	f7fd f880 	bl	8000902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003802:	2025      	movs	r0, #37	; 0x25
 8003804:	f7fd f899 	bl	800093a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003808:	e0c8      	b.n	800399c <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6a      	ldr	r2, [pc, #424]	; (80039b8 <HAL_UART_MspInit+0x290>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d15e      	bne.n	80038d2 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003814:	4b64      	ldr	r3, [pc, #400]	; (80039a8 <HAL_UART_MspInit+0x280>)
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	4a63      	ldr	r2, [pc, #396]	; (80039a8 <HAL_UART_MspInit+0x280>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381e:	61d3      	str	r3, [r2, #28]
 8003820:	4b61      	ldr	r3, [pc, #388]	; (80039a8 <HAL_UART_MspInit+0x280>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382c:	4b5e      	ldr	r3, [pc, #376]	; (80039a8 <HAL_UART_MspInit+0x280>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	4a5d      	ldr	r2, [pc, #372]	; (80039a8 <HAL_UART_MspInit+0x280>)
 8003832:	f043 0304 	orr.w	r3, r3, #4
 8003836:	6193      	str	r3, [r2, #24]
 8003838:	4b5b      	ldr	r3, [pc, #364]	; (80039a8 <HAL_UART_MspInit+0x280>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003844:	2304      	movs	r3, #4
 8003846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003848:	2302      	movs	r3, #2
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800384c:	2303      	movs	r3, #3
 800384e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003850:	f107 0320 	add.w	r3, r7, #32
 8003854:	4619      	mov	r1, r3
 8003856:	4855      	ldr	r0, [pc, #340]	; (80039ac <HAL_UART_MspInit+0x284>)
 8003858:	f7fd faee 	bl	8000e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800385c:	2308      	movs	r3, #8
 800385e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003860:	2300      	movs	r3, #0
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	2300      	movs	r3, #0
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003868:	f107 0320 	add.w	r3, r7, #32
 800386c:	4619      	mov	r1, r3
 800386e:	484f      	ldr	r0, [pc, #316]	; (80039ac <HAL_UART_MspInit+0x284>)
 8003870:	f7fd fae2 	bl	8000e38 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003874:	4b51      	ldr	r3, [pc, #324]	; (80039bc <HAL_UART_MspInit+0x294>)
 8003876:	4a52      	ldr	r2, [pc, #328]	; (80039c0 <HAL_UART_MspInit+0x298>)
 8003878:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800387a:	4b50      	ldr	r3, [pc, #320]	; (80039bc <HAL_UART_MspInit+0x294>)
 800387c:	2210      	movs	r2, #16
 800387e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003880:	4b4e      	ldr	r3, [pc, #312]	; (80039bc <HAL_UART_MspInit+0x294>)
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003886:	4b4d      	ldr	r3, [pc, #308]	; (80039bc <HAL_UART_MspInit+0x294>)
 8003888:	2280      	movs	r2, #128	; 0x80
 800388a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800388c:	4b4b      	ldr	r3, [pc, #300]	; (80039bc <HAL_UART_MspInit+0x294>)
 800388e:	2200      	movs	r2, #0
 8003890:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003892:	4b4a      	ldr	r3, [pc, #296]	; (80039bc <HAL_UART_MspInit+0x294>)
 8003894:	2200      	movs	r2, #0
 8003896:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003898:	4b48      	ldr	r3, [pc, #288]	; (80039bc <HAL_UART_MspInit+0x294>)
 800389a:	2200      	movs	r2, #0
 800389c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800389e:	4b47      	ldr	r3, [pc, #284]	; (80039bc <HAL_UART_MspInit+0x294>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80038a4:	4845      	ldr	r0, [pc, #276]	; (80039bc <HAL_UART_MspInit+0x294>)
 80038a6:	f7fd f863 	bl	8000970 <HAL_DMA_Init>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80038b0:	f7ff fc63 	bl	800317a <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a41      	ldr	r2, [pc, #260]	; (80039bc <HAL_UART_MspInit+0x294>)
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
 80038ba:	4a40      	ldr	r2, [pc, #256]	; (80039bc <HAL_UART_MspInit+0x294>)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038c0:	2200      	movs	r2, #0
 80038c2:	2100      	movs	r1, #0
 80038c4:	2026      	movs	r0, #38	; 0x26
 80038c6:	f7fd f81c 	bl	8000902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038ca:	2026      	movs	r0, #38	; 0x26
 80038cc:	f7fd f835 	bl	800093a <HAL_NVIC_EnableIRQ>
}
 80038d0:	e064      	b.n	800399c <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a3b      	ldr	r2, [pc, #236]	; (80039c4 <HAL_UART_MspInit+0x29c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d15f      	bne.n	800399c <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART3_CLK_ENABLE();
 80038dc:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <HAL_UART_MspInit+0x280>)
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	4a31      	ldr	r2, [pc, #196]	; (80039a8 <HAL_UART_MspInit+0x280>)
 80038e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e6:	61d3      	str	r3, [r2, #28]
 80038e8:	4b2f      	ldr	r3, [pc, #188]	; (80039a8 <HAL_UART_MspInit+0x280>)
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f4:	4b2c      	ldr	r3, [pc, #176]	; (80039a8 <HAL_UART_MspInit+0x280>)
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	4a2b      	ldr	r2, [pc, #172]	; (80039a8 <HAL_UART_MspInit+0x280>)
 80038fa:	f043 0308 	orr.w	r3, r3, #8
 80038fe:	6193      	str	r3, [r2, #24]
 8003900:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <HAL_UART_MspInit+0x280>)
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800390c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003912:	2302      	movs	r3, #2
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003916:	2303      	movs	r3, #3
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800391a:	f107 0320 	add.w	r3, r7, #32
 800391e:	4619      	mov	r1, r3
 8003920:	4829      	ldr	r0, [pc, #164]	; (80039c8 <HAL_UART_MspInit+0x2a0>)
 8003922:	f7fd fa89 	bl	8000e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003926:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800392a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800392c:	2300      	movs	r3, #0
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	2300      	movs	r3, #0
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003934:	f107 0320 	add.w	r3, r7, #32
 8003938:	4619      	mov	r1, r3
 800393a:	4823      	ldr	r0, [pc, #140]	; (80039c8 <HAL_UART_MspInit+0x2a0>)
 800393c:	f7fd fa7c 	bl	8000e38 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8003940:	4b22      	ldr	r3, [pc, #136]	; (80039cc <HAL_UART_MspInit+0x2a4>)
 8003942:	4a23      	ldr	r2, [pc, #140]	; (80039d0 <HAL_UART_MspInit+0x2a8>)
 8003944:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003946:	4b21      	ldr	r3, [pc, #132]	; (80039cc <HAL_UART_MspInit+0x2a4>)
 8003948:	2210      	movs	r2, #16
 800394a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800394c:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <HAL_UART_MspInit+0x2a4>)
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <HAL_UART_MspInit+0x2a4>)
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003958:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <HAL_UART_MspInit+0x2a4>)
 800395a:	2200      	movs	r2, #0
 800395c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_UART_MspInit+0x2a4>)
 8003960:	2200      	movs	r2, #0
 8003962:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003964:	4b19      	ldr	r3, [pc, #100]	; (80039cc <HAL_UART_MspInit+0x2a4>)
 8003966:	2200      	movs	r2, #0
 8003968:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800396a:	4b18      	ldr	r3, [pc, #96]	; (80039cc <HAL_UART_MspInit+0x2a4>)
 800396c:	2200      	movs	r2, #0
 800396e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003970:	4816      	ldr	r0, [pc, #88]	; (80039cc <HAL_UART_MspInit+0x2a4>)
 8003972:	f7fc fffd 	bl	8000970 <HAL_DMA_Init>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_UART_MspInit+0x258>
      Error_Handler();
 800397c:	f7ff fbfd 	bl	800317a <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a12      	ldr	r2, [pc, #72]	; (80039cc <HAL_UART_MspInit+0x2a4>)
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
 8003986:	4a11      	ldr	r2, [pc, #68]	; (80039cc <HAL_UART_MspInit+0x2a4>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800398c:	2200      	movs	r2, #0
 800398e:	2100      	movs	r1, #0
 8003990:	2027      	movs	r0, #39	; 0x27
 8003992:	f7fc ffb6 	bl	8000902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003996:	2027      	movs	r0, #39	; 0x27
 8003998:	f7fc ffcf 	bl	800093a <HAL_NVIC_EnableIRQ>
}
 800399c:	bf00      	nop
 800399e:	3730      	adds	r7, #48	; 0x30
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40013800 	.word	0x40013800
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40010800 	.word	0x40010800
 80039b0:	200001cc 	.word	0x200001cc
 80039b4:	40020044 	.word	0x40020044
 80039b8:	40004400 	.word	0x40004400
 80039bc:	20000210 	.word	0x20000210
 80039c0:	40020080 	.word	0x40020080
 80039c4:	40004800 	.word	0x40004800
 80039c8:	40010c00 	.word	0x40010c00
 80039cc:	20000188 	.word	0x20000188
 80039d0:	4002001c 	.word	0x4002001c

080039d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039e4:	e7fe      	b.n	80039e4 <HardFault_Handler+0x4>

080039e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039e6:	b480      	push	{r7}
 80039e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039ea:	e7fe      	b.n	80039ea <MemManage_Handler+0x4>

080039ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039f0:	e7fe      	b.n	80039f0 <BusFault_Handler+0x4>

080039f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039f2:	b480      	push	{r7}
 80039f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039f6:	e7fe      	b.n	80039f6 <UsageFault_Handler+0x4>

080039f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr

08003a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a20:	f7fc fe5e 	bl	80006e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a24:	bf00      	nop
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <DMA1_Channel2_IRQHandler+0x10>)
 8003a2e:	f7fd f8cf 	bl	8000bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000188 	.word	0x20000188

08003a3c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <DMA1_Channel4_IRQHandler+0x10>)
 8003a42:	f7fd f8c5 	bl	8000bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200001cc 	.word	0x200001cc

08003a50 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003a54:	4802      	ldr	r0, [pc, #8]	; (8003a60 <DMA1_Channel7_IRQHandler+0x10>)
 8003a56:	f7fd f8bb 	bl	8000bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000210 	.word	0x20000210

08003a64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a68:	4802      	ldr	r0, [pc, #8]	; (8003a74 <TIM4_IRQHandler+0x10>)
 8003a6a:	f7fd ffaa 	bl	80019c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	2000031c 	.word	0x2000031c

08003a78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <USART1_IRQHandler+0x10>)
 8003a7e:	f7fe fc15 	bl	80022ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000254 	.word	0x20000254

08003a8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <USART2_IRQHandler+0x10>)
 8003a92:	f7fe fc0b 	bl	80022ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	200002d8 	.word	0x200002d8

08003aa0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003aa4:	4802      	ldr	r0, [pc, #8]	; (8003ab0 <USART3_IRQHandler+0x10>)
 8003aa6:	f7fe fc01 	bl	80022ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000040 	.word	0x20000040

08003ab4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003ab8:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <SystemInit+0x5c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <SystemInit+0x5c>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003ac4:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <SystemInit+0x5c>)
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	4911      	ldr	r1, [pc, #68]	; (8003b10 <SystemInit+0x5c>)
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <SystemInit+0x60>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <SystemInit+0x5c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a0e      	ldr	r2, [pc, #56]	; (8003b10 <SystemInit+0x5c>)
 8003ad6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ade:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <SystemInit+0x5c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a0a      	ldr	r2, [pc, #40]	; (8003b10 <SystemInit+0x5c>)
 8003ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003aec:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <SystemInit+0x5c>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4a07      	ldr	r2, [pc, #28]	; (8003b10 <SystemInit+0x5c>)
 8003af2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003af6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <SystemInit+0x5c>)
 8003afa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003afe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <SystemInit+0x64>)
 8003b02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b06:	609a      	str	r2, [r3, #8]
#endif 
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	40021000 	.word	0x40021000
 8003b14:	f8ff0000 	.word	0xf8ff0000
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <TIM4_Ini>:
*  Parameter(s)   :  
*  Return Value   :  
******************************************************************************/

void TIM4_Ini (void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8003b20:	4803      	ldr	r0, [pc, #12]	; (8003b30 <TIM4_Ini+0x14>)
 8003b22:	f7fd ff34 	bl	800198e <HAL_TIM_Base_Start_IT>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b26:	201e      	movs	r0, #30
 8003b28:	f7fc ff07 	bl	800093a <HAL_NVIC_EnableIRQ>
}
 8003b2c:	bf00      	nop
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	2000031c 	.word	0x2000031c

08003b34 <TIM4_HAL_TIM_PeriodElapsedCallback>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void TIM4_HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	CTL_u32Timeout_Counter++;
 8003b3c:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3301      	adds	r3, #1
 8003b42:	4a03      	ldr	r2, [pc, #12]	; (8003b50 <TIM4_HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003b44:	6013      	str	r3, [r2, #0]
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr
 8003b50:	20000318 	.word	0x20000318

08003b54 <UART3_Ini>:
*  Parameter(s)   :  
*  Return Value   :  
******************************************************************************/

void UART3_Ini (void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &u8Temp, 1);
 8003b58:	2201      	movs	r2, #1
 8003b5a:	4903      	ldr	r1, [pc, #12]	; (8003b68 <UART3_Ini+0x14>)
 8003b5c:	4803      	ldr	r0, [pc, #12]	; (8003b6c <UART3_Ini+0x18>)
 8003b5e:	f7fe fae5 	bl	800212c <HAL_UART_Receive_IT>
}
 8003b62:	bf00      	nop
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	200002d4 	.word	0x200002d4
 8003b6c:	20000040 	.word	0x20000040

08003b70 <UART3_HAL_UART_RxCpltCallback>:
*  Parameter(s)   :
*  Return Value   :
******************************************************************************/

void UART3_HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	SER3_RecBuf_Put(u8Temp);
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <UART3_HAL_UART_RxCpltCallback+0x24>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff fc9b 	bl	80034b8 <SER3_RecBuf_Put>
	HAL_UART_Receive_IT(&huart3, &u8Temp, 1);
 8003b82:	2201      	movs	r2, #1
 8003b84:	4903      	ldr	r1, [pc, #12]	; (8003b94 <UART3_HAL_UART_RxCpltCallback+0x24>)
 8003b86:	4804      	ldr	r0, [pc, #16]	; (8003b98 <UART3_HAL_UART_RxCpltCallback+0x28>)
 8003b88:	f7fe fad0 	bl	800212c <HAL_UART_Receive_IT>
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	200002d4 	.word	0x200002d4
 8003b98:	20000040 	.word	0x20000040

08003b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003b9c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003b9e:	e003      	b.n	8003ba8 <LoopCopyDataInit>

08003ba0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003ba2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003ba4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003ba6:	3104      	adds	r1, #4

08003ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003ba8:	480a      	ldr	r0, [pc, #40]	; (8003bd4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003bac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003bae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003bb0:	d3f6      	bcc.n	8003ba0 <CopyDataInit>
  ldr r2, =_sbss
 8003bb2:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003bb4:	e002      	b.n	8003bbc <LoopFillZerobss>

08003bb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003bb6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003bb8:	f842 3b04 	str.w	r3, [r2], #4

08003bbc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003bbc:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003bbe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003bc0:	d3f9      	bcc.n	8003bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003bc2:	f7ff ff77 	bl	8003ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bc6:	f000 f80f 	bl	8003be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bca:	f7ff f931 	bl	8002e30 <main>
  bx lr
 8003bce:	4770      	bx	lr
  ldr r3, =_sidata
 8003bd0:	08003ca4 	.word	0x08003ca4
  ldr r0, =_sdata
 8003bd4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003bd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003bdc:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8003be0:	20002188 	.word	0x20002188

08003be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003be4:	e7fe      	b.n	8003be4 <ADC1_2_IRQHandler>
	...

08003be8 <__libc_init_array>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	2500      	movs	r5, #0
 8003bec:	4e0c      	ldr	r6, [pc, #48]	; (8003c20 <__libc_init_array+0x38>)
 8003bee:	4c0d      	ldr	r4, [pc, #52]	; (8003c24 <__libc_init_array+0x3c>)
 8003bf0:	1ba4      	subs	r4, r4, r6
 8003bf2:	10a4      	asrs	r4, r4, #2
 8003bf4:	42a5      	cmp	r5, r4
 8003bf6:	d109      	bne.n	8003c0c <__libc_init_array+0x24>
 8003bf8:	f000 f82e 	bl	8003c58 <_init>
 8003bfc:	2500      	movs	r5, #0
 8003bfe:	4e0a      	ldr	r6, [pc, #40]	; (8003c28 <__libc_init_array+0x40>)
 8003c00:	4c0a      	ldr	r4, [pc, #40]	; (8003c2c <__libc_init_array+0x44>)
 8003c02:	1ba4      	subs	r4, r4, r6
 8003c04:	10a4      	asrs	r4, r4, #2
 8003c06:	42a5      	cmp	r5, r4
 8003c08:	d105      	bne.n	8003c16 <__libc_init_array+0x2e>
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
 8003c0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c10:	4798      	blx	r3
 8003c12:	3501      	adds	r5, #1
 8003c14:	e7ee      	b.n	8003bf4 <__libc_init_array+0xc>
 8003c16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c1a:	4798      	blx	r3
 8003c1c:	3501      	adds	r5, #1
 8003c1e:	e7f2      	b.n	8003c06 <__libc_init_array+0x1e>
 8003c20:	08003c9c 	.word	0x08003c9c
 8003c24:	08003c9c 	.word	0x08003c9c
 8003c28:	08003c9c 	.word	0x08003c9c
 8003c2c:	08003ca0 	.word	0x08003ca0

08003c30 <memcpy>:
 8003c30:	b510      	push	{r4, lr}
 8003c32:	1e43      	subs	r3, r0, #1
 8003c34:	440a      	add	r2, r1
 8003c36:	4291      	cmp	r1, r2
 8003c38:	d100      	bne.n	8003c3c <memcpy+0xc>
 8003c3a:	bd10      	pop	{r4, pc}
 8003c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c44:	e7f7      	b.n	8003c36 <memcpy+0x6>

08003c46 <memset>:
 8003c46:	4603      	mov	r3, r0
 8003c48:	4402      	add	r2, r0
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d100      	bne.n	8003c50 <memset+0xa>
 8003c4e:	4770      	bx	lr
 8003c50:	f803 1b01 	strb.w	r1, [r3], #1
 8003c54:	e7f9      	b.n	8003c4a <memset+0x4>
	...

08003c58 <_init>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr

08003c64 <_fini>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	bf00      	nop
 8003c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6a:	bc08      	pop	{r3}
 8003c6c:	469e      	mov	lr, r3
 8003c6e:	4770      	bx	lr
